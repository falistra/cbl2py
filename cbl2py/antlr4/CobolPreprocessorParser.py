# Generated from CobolPreprocessor.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,293,686,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,75,8,0,10,0,12,0,78,9,0,1,0,1,0,1,
        1,1,1,3,1,84,8,1,1,1,1,1,4,1,88,8,1,11,1,12,1,89,1,2,1,2,1,2,1,2,
        3,2,96,8,2,1,2,5,2,99,8,2,10,2,12,2,102,9,2,1,2,1,2,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,3,3,126,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,151,8,3,1,3,3,3,
        154,8,3,1,3,3,3,157,8,3,1,3,3,3,160,8,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,180,8,3,1,3,
        1,3,1,3,1,3,1,3,1,3,3,3,188,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,3,3,220,8,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,
        228,8,3,1,3,1,3,1,3,1,3,3,3,234,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,251,8,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,3,3,324,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,3,3,339,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,361,8,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,3,3,371,8,3,1,3,1,3,1,3,1,3,3,3,377,8,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,393,8,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,3,3,402,8,3,1,3,3,3,405,8,3,1,3,3,3,408,
        8,3,1,3,3,3,411,8,3,1,3,3,3,414,8,3,1,3,3,3,417,8,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,
        437,8,3,1,3,3,3,440,8,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,448,8,3,1,4,
        1,4,1,4,1,4,1,4,3,4,455,8,4,1,5,1,5,1,5,1,5,3,5,461,8,5,1,5,1,5,
        3,5,465,8,5,1,6,1,6,1,6,1,6,1,6,3,6,472,8,6,1,7,1,7,1,7,1,8,1,8,
        1,8,5,8,480,8,8,10,8,12,8,483,9,8,1,8,1,8,1,8,1,8,3,8,489,8,8,5,
        8,491,8,8,10,8,12,8,494,9,8,1,8,5,8,497,8,8,10,8,12,8,500,9,8,1,
        8,1,8,1,9,1,9,1,9,3,9,507,8,9,1,9,1,9,3,9,511,8,9,1,10,1,10,3,10,
        515,8,10,1,11,1,11,5,11,519,8,11,10,11,12,11,522,9,11,1,11,1,11,
        4,11,526,8,11,11,11,12,11,527,1,11,5,11,531,8,11,10,11,12,11,534,
        9,11,1,12,1,12,1,12,5,12,539,8,12,10,12,12,12,542,9,12,1,12,3,12,
        545,8,12,1,13,1,13,5,13,549,8,13,10,13,12,13,552,9,13,1,13,4,13,
        555,8,13,11,13,12,13,556,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,
        5,15,567,8,15,10,15,12,15,570,9,15,1,15,1,15,5,15,574,8,15,10,15,
        12,15,577,9,15,1,15,1,15,5,15,581,8,15,10,15,12,15,584,9,15,1,15,
        3,15,587,8,15,1,15,5,15,590,8,15,10,15,12,15,593,9,15,1,15,3,15,
        596,8,15,1,16,1,16,5,16,600,8,16,10,16,12,16,603,9,16,1,16,1,16,
        3,16,607,8,16,1,17,1,17,5,17,611,8,17,10,17,12,17,614,9,17,1,17,
        1,17,3,17,618,8,17,1,18,1,18,1,18,1,18,3,18,624,8,18,1,19,1,19,1,
        19,1,19,3,19,630,8,19,1,20,1,20,3,20,634,8,20,1,21,1,21,3,21,638,
        8,21,1,22,1,22,1,22,3,22,643,8,22,1,23,1,23,3,23,647,8,23,1,23,1,
        23,1,24,1,24,4,24,653,8,24,11,24,12,24,654,1,25,1,25,1,25,1,25,4,
        25,661,8,25,11,25,12,25,662,1,26,1,26,1,26,1,26,1,26,1,26,1,26,4,
        26,672,8,26,11,26,12,26,673,1,27,1,27,3,27,678,8,27,1,28,1,28,1,
        29,1,29,1,30,1,30,1,30,0,0,31,0,2,4,6,8,10,12,14,16,18,20,22,24,
        26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,0,83,2,0,16,
        16,217,217,1,0,7,8,4,0,23,23,59,59,269,269,271,271,1,0,13,14,2,0,
        22,22,26,26,2,0,24,24,269,269,1,0,30,31,2,0,33,33,41,41,2,0,62,62,
        140,140,2,0,185,185,254,254,2,0,37,37,270,270,2,0,38,38,42,42,1,
        0,43,44,1,0,45,46,1,0,57,58,2,0,60,60,64,64,2,0,62,62,272,272,3,
        0,271,271,274,274,278,280,1,0,273,275,6,0,35,35,102,102,242,242,
        270,270,276,276,278,278,2,0,4,4,81,81,1,0,75,76,4,0,29,29,50,51,
        72,74,256,256,2,0,77,77,83,83,1,0,94,95,4,0,24,24,109,109,113,113,
        269,269,2,0,3,3,106,106,3,0,29,29,50,50,74,74,2,0,109,109,113,113,
        3,0,271,271,278,278,280,280,1,0,115,116,2,0,118,118,127,127,2,0,
        117,117,122,122,1,0,125,126,2,0,123,123,128,128,1,0,129,130,1,0,
        135,136,2,0,138,138,143,143,2,0,137,137,140,140,1,0,151,152,1,0,
        154,155,1,0,156,157,1,0,158,159,1,0,161,162,2,0,171,171,180,180,
        2,0,168,168,172,172,1,0,175,176,1,0,177,178,1,0,181,182,1,0,187,
        188,2,0,192,192,194,194,2,0,34,34,99,100,1,0,189,190,1,0,195,196,
        3,0,96,96,165,165,213,213,1,0,198,199,1,0,201,202,2,0,207,207,209,
        209,2,0,65,65,245,245,1,0,211,212,1,0,215,216,8,0,19,19,23,23,86,
        88,90,90,97,97,257,257,275,275,279,279,2,0,219,219,277,277,1,0,227,
        228,2,0,230,230,248,248,2,0,231,231,278,278,1,0,236,237,1,0,243,
        244,1,0,249,250,2,0,68,68,145,145,2,0,169,170,225,226,2,0,49,49,
        132,132,3,0,11,11,207,207,245,245,1,0,259,260,2,0,261,261,264,264,
        4,0,23,23,262,262,269,269,281,281,2,0,265,265,281,281,2,0,65,65,
        229,229,1,0,266,267,2,0,69,69,200,200,1,0,239,241,1,0,286,287,17,
        0,1,17,19,24,26,51,53,54,56,60,62,69,71,77,79,88,90,186,188,220,
        222,223,225,237,242,245,247,259,261,263,265,281,283,283,899,0,76,
        1,0,0,0,2,81,1,0,0,0,4,91,1,0,0,0,6,447,1,0,0,0,8,449,1,0,0,0,10,
        456,1,0,0,0,12,466,1,0,0,0,14,473,1,0,0,0,16,476,1,0,0,0,18,506,
        1,0,0,0,20,514,1,0,0,0,22,516,1,0,0,0,24,535,1,0,0,0,26,546,1,0,
        0,0,28,560,1,0,0,0,30,564,1,0,0,0,32,597,1,0,0,0,34,608,1,0,0,0,
        36,623,1,0,0,0,38,629,1,0,0,0,40,631,1,0,0,0,42,635,1,0,0,0,44,639,
        1,0,0,0,46,644,1,0,0,0,48,652,1,0,0,0,50,660,1,0,0,0,52,671,1,0,
        0,0,54,677,1,0,0,0,56,679,1,0,0,0,58,681,1,0,0,0,60,683,1,0,0,0,
        62,75,3,2,1,0,63,75,3,16,8,0,64,75,3,8,4,0,65,75,3,10,5,0,66,75,
        3,12,6,0,67,75,3,28,14,0,68,75,3,24,12,0,69,75,3,40,20,0,70,75,3,
        42,21,0,71,75,3,44,22,0,72,75,3,52,26,0,73,75,5,290,0,0,74,62,1,
        0,0,0,74,63,1,0,0,0,74,64,1,0,0,0,74,65,1,0,0,0,74,66,1,0,0,0,74,
        67,1,0,0,0,74,68,1,0,0,0,74,69,1,0,0,0,74,70,1,0,0,0,74,71,1,0,0,
        0,74,72,1,0,0,0,74,73,1,0,0,0,75,78,1,0,0,0,76,74,1,0,0,0,76,77,
        1,0,0,0,77,79,1,0,0,0,78,76,1,0,0,0,79,80,5,0,0,1,80,1,1,0,0,0,81,
        87,7,0,0,0,82,84,5,283,0,0,83,82,1,0,0,0,83,84,1,0,0,0,84,85,1,0,
        0,0,85,88,3,6,3,0,86,88,3,4,2,0,87,83,1,0,0,0,87,86,1,0,0,0,88,89,
        1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,3,1,0,0,0,91,92,5,263,0,0,
        92,93,5,89,0,0,93,100,3,6,3,0,94,96,5,283,0,0,95,94,1,0,0,0,95,96,
        1,0,0,0,96,97,1,0,0,0,97,99,3,6,3,0,98,95,1,0,0,0,99,102,1,0,0,0,
        100,98,1,0,0,0,100,101,1,0,0,0,101,103,1,0,0,0,102,100,1,0,0,0,103,
        104,5,224,0,0,104,5,1,0,0,0,105,448,5,1,0,0,106,448,5,2,0,0,107,
        448,5,6,0,0,108,109,7,1,0,0,109,110,5,89,0,0,110,111,7,2,0,0,111,
        448,5,224,0,0,112,448,5,10,0,0,113,448,5,12,0,0,114,115,7,3,0,0,
        115,116,5,89,0,0,116,117,3,56,28,0,117,118,5,224,0,0,118,448,1,0,
        0,0,119,448,5,17,0,0,120,125,5,18,0,0,121,122,5,89,0,0,122,123,3,
        56,28,0,123,124,5,224,0,0,124,126,1,0,0,0,125,121,1,0,0,0,125,126,
        1,0,0,0,126,448,1,0,0,0,127,448,5,20,0,0,128,448,5,21,0,0,129,130,
        7,4,0,0,130,131,5,89,0,0,131,132,3,56,28,0,132,133,5,224,0,0,133,
        448,1,0,0,0,134,448,7,5,0,0,135,448,5,27,0,0,136,448,5,28,0,0,137,
        138,7,6,0,0,138,139,5,89,0,0,139,140,3,56,28,0,140,141,5,224,0,0,
        141,448,1,0,0,0,142,143,5,32,0,0,143,144,5,89,0,0,144,145,3,56,28,
        0,145,146,5,224,0,0,146,448,1,0,0,0,147,159,7,7,0,0,148,150,5,89,
        0,0,149,151,7,8,0,0,150,149,1,0,0,0,150,151,1,0,0,0,151,153,1,0,
        0,0,152,154,5,283,0,0,153,152,1,0,0,0,153,154,1,0,0,0,154,156,1,
        0,0,0,155,157,7,9,0,0,156,155,1,0,0,0,156,157,1,0,0,0,157,158,1,
        0,0,0,158,160,5,224,0,0,159,148,1,0,0,0,159,160,1,0,0,0,160,448,
        1,0,0,0,161,448,5,34,0,0,162,448,7,10,0,0,163,448,5,36,0,0,164,448,
        7,11,0,0,165,448,5,40,0,0,166,448,7,12,0,0,167,448,7,13,0,0,168,
        448,5,47,0,0,169,448,5,53,0,0,170,448,5,56,0,0,171,448,7,14,0,0,
        172,448,7,15,0,0,173,448,5,61,0,0,174,175,7,16,0,0,175,176,5,89,
        0,0,176,179,7,17,0,0,177,178,5,283,0,0,178,180,7,17,0,0,179,177,
        1,0,0,0,179,180,1,0,0,0,180,181,1,0,0,0,181,448,5,224,0,0,182,183,
        5,63,0,0,183,184,5,89,0,0,184,187,7,18,0,0,185,186,5,283,0,0,186,
        188,7,19,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,189,1,0,0,0,189,
        448,5,224,0,0,190,448,5,66,0,0,191,448,5,67,0,0,192,193,5,71,0,0,
        193,194,5,89,0,0,194,195,7,20,0,0,195,448,5,224,0,0,196,197,7,21,
        0,0,197,198,5,89,0,0,198,199,7,22,0,0,199,448,5,224,0,0,200,448,
        5,78,0,0,201,448,5,79,0,0,202,448,5,80,0,0,203,448,5,82,0,0,204,
        205,7,23,0,0,205,206,5,89,0,0,206,207,3,56,28,0,207,208,5,224,0,
        0,208,448,1,0,0,0,209,448,5,84,0,0,210,448,5,85,0,0,211,448,5,91,
        0,0,212,213,5,92,0,0,213,214,5,89,0,0,214,215,3,56,28,0,215,216,
        5,283,0,0,216,219,3,56,28,0,217,218,5,283,0,0,218,220,3,56,28,0,
        219,217,1,0,0,0,219,220,1,0,0,0,220,221,1,0,0,0,221,222,5,224,0,
        0,222,448,1,0,0,0,223,227,7,24,0,0,224,225,5,89,0,0,225,226,7,25,
        0,0,226,228,5,224,0,0,227,224,1,0,0,0,227,228,1,0,0,0,228,448,1,
        0,0,0,229,233,5,98,0,0,230,231,5,89,0,0,231,232,7,26,0,0,232,234,
        5,224,0,0,233,230,1,0,0,0,233,234,1,0,0,0,234,448,1,0,0,0,235,236,
        5,101,0,0,236,237,5,89,0,0,237,238,7,27,0,0,238,448,5,224,0,0,239,
        448,5,104,0,0,240,448,5,105,0,0,241,448,5,107,0,0,242,448,5,108,
        0,0,243,448,5,110,0,0,244,448,5,111,0,0,245,448,5,112,0,0,246,250,
        7,28,0,0,247,248,5,89,0,0,248,249,7,29,0,0,249,251,5,224,0,0,250,
        247,1,0,0,0,250,251,1,0,0,0,251,448,1,0,0,0,252,448,5,114,0,0,253,
        448,7,30,0,0,254,448,7,31,0,0,255,448,5,119,0,0,256,448,5,121,0,
        0,257,448,7,32,0,0,258,448,5,124,0,0,259,448,5,120,0,0,260,448,7,
        33,0,0,261,448,7,34,0,0,262,448,7,35,0,0,263,448,5,131,0,0,264,448,
        5,133,0,0,265,448,5,134,0,0,266,448,7,36,0,0,267,448,7,37,0,0,268,
        448,5,139,0,0,269,448,7,38,0,0,270,448,5,141,0,0,271,448,5,142,0,
        0,272,448,5,144,0,0,273,448,5,146,0,0,274,448,5,147,0,0,275,448,
        5,148,0,0,276,448,5,149,0,0,277,448,5,150,0,0,278,448,7,39,0,0,279,
        448,5,153,0,0,280,448,7,40,0,0,281,448,7,41,0,0,282,448,7,42,0,0,
        283,448,5,160,0,0,284,448,7,43,0,0,285,448,5,163,0,0,286,448,5,164,
        0,0,287,448,5,166,0,0,288,448,5,167,0,0,289,448,7,44,0,0,290,448,
        7,45,0,0,291,448,5,173,0,0,292,448,5,174,0,0,293,448,7,46,0,0,294,
        448,7,47,0,0,295,448,5,179,0,0,296,448,7,48,0,0,297,448,5,183,0,
        0,298,448,5,184,0,0,299,448,5,186,0,0,300,448,7,49,0,0,301,448,5,
        193,0,0,302,303,7,50,0,0,303,304,5,89,0,0,304,305,7,51,0,0,305,448,
        5,224,0,0,306,448,5,186,0,0,307,448,7,52,0,0,308,448,5,191,0,0,309,
        448,7,53,0,0,310,311,5,197,0,0,311,312,5,89,0,0,312,313,7,54,0,0,
        313,448,5,224,0,0,314,448,7,55,0,0,315,448,7,56,0,0,316,317,5,205,
        0,0,317,318,5,89,0,0,318,319,3,56,28,0,319,320,5,283,0,0,320,323,
        3,56,28,0,321,322,5,283,0,0,322,324,3,56,28,0,323,321,1,0,0,0,323,
        324,1,0,0,0,324,325,1,0,0,0,325,326,5,224,0,0,326,448,1,0,0,0,327,
        328,5,206,0,0,328,329,5,89,0,0,329,330,3,56,28,0,330,331,5,283,0,
        0,331,332,3,56,28,0,332,333,5,224,0,0,333,448,1,0,0,0,334,338,7,
        57,0,0,335,336,5,89,0,0,336,337,7,58,0,0,337,339,5,224,0,0,338,335,
        1,0,0,0,338,339,1,0,0,0,339,448,1,0,0,0,340,448,5,208,0,0,341,448,
        5,210,0,0,342,448,5,204,0,0,343,344,7,59,0,0,344,345,5,89,0,0,345,
        346,3,54,27,0,346,347,5,224,0,0,347,448,1,0,0,0,348,349,7,60,0,0,
        349,350,5,89,0,0,350,351,7,61,0,0,351,448,5,224,0,0,352,448,5,218,
        0,0,353,448,7,62,0,0,354,448,5,220,0,0,355,356,5,223,0,0,356,360,
        5,89,0,0,357,361,5,5,0,0,358,361,5,9,0,0,359,361,3,56,28,0,360,357,
        1,0,0,0,360,358,1,0,0,0,360,359,1,0,0,0,361,362,1,0,0,0,362,448,
        5,224,0,0,363,370,7,63,0,0,364,365,5,89,0,0,365,366,3,56,28,0,366,
        367,5,283,0,0,367,368,3,56,28,0,368,369,5,224,0,0,369,371,1,0,0,
        0,370,364,1,0,0,0,370,371,1,0,0,0,371,448,1,0,0,0,372,373,7,64,0,
        0,373,376,5,89,0,0,374,377,5,93,0,0,375,377,3,56,28,0,376,374,1,
        0,0,0,376,375,1,0,0,0,377,378,1,0,0,0,378,448,5,224,0,0,379,448,
        7,65,0,0,380,448,5,232,0,0,381,382,5,233,0,0,382,383,5,89,0,0,383,
        384,3,56,28,0,384,385,5,224,0,0,385,448,1,0,0,0,386,448,5,234,0,
        0,387,392,5,235,0,0,388,389,5,89,0,0,389,390,3,56,28,0,390,391,5,
        224,0,0,391,393,1,0,0,0,392,388,1,0,0,0,392,393,1,0,0,0,393,448,
        1,0,0,0,394,448,7,66,0,0,395,448,7,67,0,0,396,448,5,247,0,0,397,
        448,7,68,0,0,398,416,5,251,0,0,399,401,5,89,0,0,400,402,7,69,0,0,
        401,400,1,0,0,0,401,402,1,0,0,0,402,404,1,0,0,0,403,405,5,283,0,
        0,404,403,1,0,0,0,404,405,1,0,0,0,405,407,1,0,0,0,406,408,7,70,0,
        0,407,406,1,0,0,0,407,408,1,0,0,0,408,410,1,0,0,0,409,411,5,283,
        0,0,410,409,1,0,0,0,410,411,1,0,0,0,411,413,1,0,0,0,412,414,7,71,
        0,0,413,412,1,0,0,0,413,414,1,0,0,0,414,415,1,0,0,0,415,417,5,224,
        0,0,416,399,1,0,0,0,416,417,1,0,0,0,417,448,1,0,0,0,418,448,5,252,
        0,0,419,420,5,255,0,0,420,421,5,89,0,0,421,422,7,72,0,0,422,448,
        5,224,0,0,423,448,5,258,0,0,424,425,7,73,0,0,425,426,5,89,0,0,426,
        427,3,54,27,0,427,428,5,224,0,0,428,448,1,0,0,0,429,430,7,74,0,0,
        430,431,5,89,0,0,431,432,7,75,0,0,432,448,5,224,0,0,433,439,7,76,
        0,0,434,436,5,89,0,0,435,437,7,77,0,0,436,435,1,0,0,0,436,437,1,
        0,0,0,437,438,1,0,0,0,438,440,5,224,0,0,439,434,1,0,0,0,439,440,
        1,0,0,0,440,448,1,0,0,0,441,442,7,78,0,0,442,443,5,89,0,0,443,444,
        3,56,28,0,444,445,5,224,0,0,445,448,1,0,0,0,446,448,5,268,0,0,447,
        105,1,0,0,0,447,106,1,0,0,0,447,107,1,0,0,0,447,108,1,0,0,0,447,
        112,1,0,0,0,447,113,1,0,0,0,447,114,1,0,0,0,447,119,1,0,0,0,447,
        120,1,0,0,0,447,127,1,0,0,0,447,128,1,0,0,0,447,129,1,0,0,0,447,
        134,1,0,0,0,447,135,1,0,0,0,447,136,1,0,0,0,447,137,1,0,0,0,447,
        142,1,0,0,0,447,147,1,0,0,0,447,161,1,0,0,0,447,162,1,0,0,0,447,
        163,1,0,0,0,447,164,1,0,0,0,447,165,1,0,0,0,447,166,1,0,0,0,447,
        167,1,0,0,0,447,168,1,0,0,0,447,169,1,0,0,0,447,170,1,0,0,0,447,
        171,1,0,0,0,447,172,1,0,0,0,447,173,1,0,0,0,447,174,1,0,0,0,447,
        182,1,0,0,0,447,190,1,0,0,0,447,191,1,0,0,0,447,192,1,0,0,0,447,
        196,1,0,0,0,447,200,1,0,0,0,447,201,1,0,0,0,447,202,1,0,0,0,447,
        203,1,0,0,0,447,204,1,0,0,0,447,209,1,0,0,0,447,210,1,0,0,0,447,
        211,1,0,0,0,447,212,1,0,0,0,447,223,1,0,0,0,447,229,1,0,0,0,447,
        235,1,0,0,0,447,239,1,0,0,0,447,240,1,0,0,0,447,241,1,0,0,0,447,
        242,1,0,0,0,447,243,1,0,0,0,447,244,1,0,0,0,447,245,1,0,0,0,447,
        246,1,0,0,0,447,252,1,0,0,0,447,253,1,0,0,0,447,254,1,0,0,0,447,
        255,1,0,0,0,447,256,1,0,0,0,447,257,1,0,0,0,447,258,1,0,0,0,447,
        259,1,0,0,0,447,260,1,0,0,0,447,261,1,0,0,0,447,262,1,0,0,0,447,
        263,1,0,0,0,447,264,1,0,0,0,447,265,1,0,0,0,447,266,1,0,0,0,447,
        267,1,0,0,0,447,268,1,0,0,0,447,269,1,0,0,0,447,270,1,0,0,0,447,
        271,1,0,0,0,447,272,1,0,0,0,447,273,1,0,0,0,447,274,1,0,0,0,447,
        275,1,0,0,0,447,276,1,0,0,0,447,277,1,0,0,0,447,278,1,0,0,0,447,
        279,1,0,0,0,447,280,1,0,0,0,447,281,1,0,0,0,447,282,1,0,0,0,447,
        283,1,0,0,0,447,284,1,0,0,0,447,285,1,0,0,0,447,286,1,0,0,0,447,
        287,1,0,0,0,447,288,1,0,0,0,447,289,1,0,0,0,447,290,1,0,0,0,447,
        291,1,0,0,0,447,292,1,0,0,0,447,293,1,0,0,0,447,294,1,0,0,0,447,
        295,1,0,0,0,447,296,1,0,0,0,447,297,1,0,0,0,447,298,1,0,0,0,447,
        299,1,0,0,0,447,300,1,0,0,0,447,301,1,0,0,0,447,302,1,0,0,0,447,
        306,1,0,0,0,447,307,1,0,0,0,447,308,1,0,0,0,447,309,1,0,0,0,447,
        310,1,0,0,0,447,314,1,0,0,0,447,315,1,0,0,0,447,316,1,0,0,0,447,
        327,1,0,0,0,447,334,1,0,0,0,447,340,1,0,0,0,447,341,1,0,0,0,447,
        342,1,0,0,0,447,343,1,0,0,0,447,348,1,0,0,0,447,352,1,0,0,0,447,
        353,1,0,0,0,447,354,1,0,0,0,447,355,1,0,0,0,447,363,1,0,0,0,447,
        372,1,0,0,0,447,379,1,0,0,0,447,380,1,0,0,0,447,381,1,0,0,0,447,
        386,1,0,0,0,447,387,1,0,0,0,447,394,1,0,0,0,447,395,1,0,0,0,447,
        396,1,0,0,0,447,397,1,0,0,0,447,398,1,0,0,0,447,418,1,0,0,0,447,
        419,1,0,0,0,447,423,1,0,0,0,447,424,1,0,0,0,447,429,1,0,0,0,447,
        433,1,0,0,0,447,441,1,0,0,0,447,446,1,0,0,0,448,7,1,0,0,0,449,450,
        5,55,0,0,450,451,5,18,0,0,451,452,3,48,24,0,452,454,5,52,0,0,453,
        455,5,284,0,0,454,453,1,0,0,0,454,455,1,0,0,0,455,9,1,0,0,0,456,
        457,5,55,0,0,457,460,5,235,0,0,458,461,3,14,7,0,459,461,3,50,25,
        0,460,458,1,0,0,0,460,459,1,0,0,0,461,462,1,0,0,0,462,464,5,52,0,
        0,463,465,5,284,0,0,464,463,1,0,0,0,464,465,1,0,0,0,465,11,1,0,0,
        0,466,467,5,55,0,0,467,468,5,238,0,0,468,469,3,48,24,0,469,471,5,
        52,0,0,470,472,5,284,0,0,471,470,1,0,0,0,471,472,1,0,0,0,472,13,
        1,0,0,0,473,474,5,70,0,0,474,475,3,18,9,0,475,15,1,0,0,0,476,477,
        5,25,0,0,477,492,3,18,9,0,478,480,5,290,0,0,479,478,1,0,0,0,480,
        483,1,0,0,0,481,479,1,0,0,0,481,482,1,0,0,0,482,488,1,0,0,0,483,
        481,1,0,0,0,484,489,3,32,16,0,485,489,3,34,17,0,486,489,3,22,11,
        0,487,489,5,246,0,0,488,484,1,0,0,0,488,485,1,0,0,0,488,486,1,0,
        0,0,488,487,1,0,0,0,489,491,1,0,0,0,490,481,1,0,0,0,491,494,1,0,
        0,0,492,490,1,0,0,0,492,493,1,0,0,0,493,498,1,0,0,0,494,492,1,0,
        0,0,495,497,5,290,0,0,496,495,1,0,0,0,497,500,1,0,0,0,498,496,1,
        0,0,0,498,499,1,0,0,0,499,501,1,0,0,0,500,498,1,0,0,0,501,502,5,
        284,0,0,502,17,1,0,0,0,503,507,3,56,28,0,504,507,3,54,27,0,505,507,
        3,58,29,0,506,503,1,0,0,0,506,504,1,0,0,0,506,505,1,0,0,0,507,510,
        1,0,0,0,508,509,7,79,0,0,509,511,3,20,10,0,510,508,1,0,0,0,510,511,
        1,0,0,0,511,19,1,0,0,0,512,515,3,56,28,0,513,515,3,54,27,0,514,512,
        1,0,0,0,514,513,1,0,0,0,515,21,1,0,0,0,516,520,5,222,0,0,517,519,
        5,290,0,0,518,517,1,0,0,0,519,522,1,0,0,0,520,518,1,0,0,0,520,521,
        1,0,0,0,521,523,1,0,0,0,522,520,1,0,0,0,523,532,3,30,15,0,524,526,
        5,290,0,0,525,524,1,0,0,0,526,527,1,0,0,0,527,525,1,0,0,0,527,528,
        1,0,0,0,528,529,1,0,0,0,529,531,3,30,15,0,530,525,1,0,0,0,531,534,
        1,0,0,0,532,530,1,0,0,0,532,533,1,0,0,0,533,23,1,0,0,0,534,532,1,
        0,0,0,535,540,3,26,13,0,536,539,3,16,8,0,537,539,3,48,24,0,538,536,
        1,0,0,0,538,537,1,0,0,0,539,542,1,0,0,0,540,538,1,0,0,0,540,541,
        1,0,0,0,541,544,1,0,0,0,542,540,1,0,0,0,543,545,3,28,14,0,544,543,
        1,0,0,0,544,545,1,0,0,0,545,25,1,0,0,0,546,554,5,221,0,0,547,549,
        5,290,0,0,548,547,1,0,0,0,549,552,1,0,0,0,550,548,1,0,0,0,550,551,
        1,0,0,0,551,553,1,0,0,0,552,550,1,0,0,0,553,555,3,30,15,0,554,550,
        1,0,0,0,555,556,1,0,0,0,556,554,1,0,0,0,556,557,1,0,0,0,557,558,
        1,0,0,0,558,559,5,284,0,0,559,27,1,0,0,0,560,561,5,221,0,0,561,562,
        5,201,0,0,562,563,5,284,0,0,563,29,1,0,0,0,564,568,3,36,18,0,565,
        567,5,290,0,0,566,565,1,0,0,0,567,570,1,0,0,0,568,566,1,0,0,0,568,
        569,1,0,0,0,569,571,1,0,0,0,570,568,1,0,0,0,571,575,5,15,0,0,572,
        574,5,290,0,0,573,572,1,0,0,0,574,577,1,0,0,0,575,573,1,0,0,0,575,
        576,1,0,0,0,576,578,1,0,0,0,577,575,1,0,0,0,578,586,3,38,19,0,579,
        581,5,290,0,0,580,579,1,0,0,0,581,584,1,0,0,0,582,580,1,0,0,0,582,
        583,1,0,0,0,583,585,1,0,0,0,584,582,1,0,0,0,585,587,3,32,16,0,586,
        582,1,0,0,0,586,587,1,0,0,0,587,595,1,0,0,0,588,590,5,290,0,0,589,
        588,1,0,0,0,590,593,1,0,0,0,591,589,1,0,0,0,591,592,1,0,0,0,592,
        594,1,0,0,0,593,591,1,0,0,0,594,596,3,34,17,0,595,591,1,0,0,0,595,
        596,1,0,0,0,596,31,1,0,0,0,597,601,7,79,0,0,598,600,5,290,0,0,599,
        598,1,0,0,0,600,603,1,0,0,0,601,599,1,0,0,0,601,602,1,0,0,0,602,
        606,1,0,0,0,603,601,1,0,0,0,604,607,3,56,28,0,605,607,3,54,27,0,
        606,604,1,0,0,0,606,605,1,0,0,0,607,33,1,0,0,0,608,612,5,203,0,0,
        609,611,5,290,0,0,610,609,1,0,0,0,611,614,1,0,0,0,612,610,1,0,0,
        0,612,613,1,0,0,0,613,617,1,0,0,0,614,612,1,0,0,0,615,618,3,56,28,
        0,616,618,3,54,27,0,617,615,1,0,0,0,617,616,1,0,0,0,618,35,1,0,0,
        0,619,624,3,56,28,0,620,624,3,54,27,0,621,624,3,46,23,0,622,624,
        3,52,26,0,623,619,1,0,0,0,623,620,1,0,0,0,623,621,1,0,0,0,623,622,
        1,0,0,0,624,37,1,0,0,0,625,630,3,56,28,0,626,630,3,54,27,0,627,630,
        3,46,23,0,628,630,3,52,26,0,629,625,1,0,0,0,629,626,1,0,0,0,629,
        627,1,0,0,0,629,628,1,0,0,0,630,39,1,0,0,0,631,633,5,48,0,0,632,
        634,5,284,0,0,633,632,1,0,0,0,633,634,1,0,0,0,634,41,1,0,0,0,635,
        637,7,80,0,0,636,638,5,284,0,0,637,636,1,0,0,0,637,638,1,0,0,0,638,
        43,1,0,0,0,639,640,5,253,0,0,640,642,3,56,28,0,641,643,5,284,0,0,
        642,641,1,0,0,0,642,643,1,0,0,0,643,45,1,0,0,0,644,646,5,285,0,0,
        645,647,3,48,24,0,646,645,1,0,0,0,646,647,1,0,0,0,647,648,1,0,0,
        0,648,649,5,285,0,0,649,47,1,0,0,0,650,653,3,52,26,0,651,653,5,290,
        0,0,652,650,1,0,0,0,652,651,1,0,0,0,653,654,1,0,0,0,654,652,1,0,
        0,0,654,655,1,0,0,0,655,49,1,0,0,0,656,661,3,52,26,0,657,661,5,25,
        0,0,658,661,5,221,0,0,659,661,5,290,0,0,660,656,1,0,0,0,660,657,
        1,0,0,0,660,658,1,0,0,0,660,659,1,0,0,0,661,662,1,0,0,0,662,660,
        1,0,0,0,662,663,1,0,0,0,663,51,1,0,0,0,664,672,3,54,27,0,665,672,
        3,56,28,0,666,672,3,58,29,0,667,672,5,293,0,0,668,672,5,284,0,0,
        669,672,5,89,0,0,670,672,5,224,0,0,671,664,1,0,0,0,671,665,1,0,0,
        0,671,666,1,0,0,0,671,667,1,0,0,0,671,668,1,0,0,0,671,669,1,0,0,
        0,671,670,1,0,0,0,672,673,1,0,0,0,673,671,1,0,0,0,673,674,1,0,0,
        0,674,53,1,0,0,0,675,678,5,288,0,0,676,678,3,60,30,0,677,675,1,0,
        0,0,677,676,1,0,0,0,678,55,1,0,0,0,679,680,7,81,0,0,680,57,1,0,0,
        0,681,682,5,289,0,0,682,59,1,0,0,0,683,684,7,82,0,0,684,61,1,0,0,
        0,75,74,76,83,87,89,95,100,125,150,153,156,159,179,187,219,227,233,
        250,323,338,360,370,376,392,401,404,407,410,413,416,436,439,447,
        454,460,464,471,481,488,492,498,506,510,514,520,527,532,538,540,
        544,550,556,568,575,582,586,591,595,601,606,612,617,623,629,633,
        637,642,646,652,654,660,662,671,673,677
    ]

class CobolPreprocessorParser ( Parser ):

    grammarFileName = "CobolPreprocessor.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'('", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "')'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'*>'", "','", "'.'", "'=='" ]

    symbolicNames = [ "<INVALID>", "ADATA", "ADV", "ALIAS", "ANSI", "ANY", 
                      "APOST", "AR", "ARITH", "AUTO", "AWO", "BIN", "BLOCK0", 
                      "BUF", "BUFSIZE", "BY", "CBL", "CBLCARD", "CICS", 
                      "CO", "COBOL2", "COBOL3", "CODEPAGE", "COMPAT", "COMPILE", 
                      "COPY", "CP", "CPP", "CPSM", "CS", "CURR", "CURRENCY", 
                      "DATA", "DATEPROC", "DBCS", "DD", "DEBUG", "DECK", 
                      "DIAGTRUNC", "DLI", "DLL", "DP", "DTR", "DU", "DUMP", 
                      "DYN", "DYNAM", "EDF", "EJECT", "EJPD", "EN", "ENGLISH", 
                      "END_EXEC", "EPILOG", "EXCI", "EXEC", "EXIT", "EXP", 
                      "EXPORTALL", "EXTEND", "FASTSRT", "FEPI", "FLAG", 
                      "FLAGSTD", "FSRT", "FULL", "GDS", "GRAPHIC", "HOOK", 
                      "IN", "INCLUDE", "INTDATE", "JA", "JP", "KA", "LANG", 
                      "LANGUAGE", "LC", "LEASM", "LENGTH", "LIB", "LILIAN", 
                      "LIN", "LINECOUNT", "LINKAGE", "LIST", "LM", "LONGMIXED", 
                      "LONGUPPER", "LPARENCHAR", "LU", "MAP", "MARGINS", 
                      "MAX", "MD", "MDECK", "MIG", "MIXED", "NAME", "NAT", 
                      "NATIONAL", "NATLANG", "NN", "NO", "NOADATA", "NOADV", 
                      "NOALIAS", "NOAWO", "NOBLOCK0", "NOC", "NOCBLCARD", 
                      "NOCICS", "NOCMPR2", "NOCOMPILE", "NOCPSM", "NOCURR", 
                      "NOCURRENCY", "NOD", "NODATEPROC", "NODBCS", "NODE", 
                      "NODEBUG", "NODECK", "NODIAGTRUNC", "NODLL", "NODU", 
                      "NODUMP", "NODP", "NODTR", "NODYN", "NODYNAM", "NOEDF", 
                      "NOEJPD", "NOEPILOG", "NOEXIT", "NOEXP", "NOEXPORTALL", 
                      "NOF", "NOFASTSRT", "NOFEPI", "NOFLAG", "NOFLAGMIG", 
                      "NOFLAGSTD", "NOFSRT", "NOGRAPHIC", "NOHOOK", "NOLENGTH", 
                      "NOLIB", "NOLINKAGE", "NOLIST", "NOMAP", "NOMD", "NOMDECK", 
                      "NONAME", "NONUM", "NONUMBER", "NOOBJ", "NOOBJECT", 
                      "NOOFF", "NOOFFSET", "NOOPSEQUENCE", "NOOPT", "NOOPTIMIZE", 
                      "NOOPTIONS", "NOP", "NOPFD", "NOPROLOG", "NORENT", 
                      "NOS", "NOSEP", "NOSEPARATE", "NOSEQ", "NOSOURCE", 
                      "NOSPIE", "NOSQL", "NOSQLC", "NOSQLCCSID", "NOSSR", 
                      "NOSSRANGE", "NOSTDTRUNC", "NOSEQUENCE", "NOTERM", 
                      "NOTERMINAL", "NOTEST", "NOTHREAD", "NOTRIG", "NOVBREF", 
                      "NOWD", "NOWORD", "NOX", "NOXREF", "NOZWB", "NS", 
                      "NSEQ", "NSYMBOL", "NUM", "NUMBER", "NUMPROC", "OBJ", 
                      "OBJECT", "OF", "OFF", "OFFSET", "ON", "OP", "OPMARGINS", 
                      "OPSEQUENCE", "OPT", "OPTFILE", "OPTIMIZE", "OPTIONS", 
                      "OUT", "OUTDD", "PFD", "PPTDBG", "PGMN", "PGMNAME", 
                      "PROCESS", "PROLOG", "QUOTE", "RENT", "REPLACE", "REPLACING", 
                      "RMODE", "RPARENCHAR", "SEP", "SEPARATE", "SEQ", "SEQUENCE", 
                      "SHORT", "SIZE", "SOURCE", "SP", "SPACE", "SPIE", 
                      "SQL", "SQLC", "SQLCCSID", "SQLIMS", "SKIP1", "SKIP2", 
                      "SKIP3", "SS", "SSR", "SSRANGE", "STD", "SUPPRESS", 
                      "SYSEIB", "SZ", "TERM", "TERMINAL", "TEST", "THREAD", 
                      "TITLE", "TRIG", "TRUNC", "UE", "UPPER", "VBREF", 
                      "WD", "WORD", "XMLPARSE", "XMLSS", "XOPTS", "XP", 
                      "XREF", "YEARWINDOW", "YW", "ZWB", "C_CHAR", "D_CHAR", 
                      "E_CHAR", "F_CHAR", "H_CHAR", "I_CHAR", "M_CHAR", 
                      "N_CHAR", "Q_CHAR", "S_CHAR", "U_CHAR", "W_CHAR", 
                      "X_CHAR", "COMMENTTAG", "COMMACHAR", "DOT", "DOUBLEEQUALCHAR", 
                      "NONNUMERICLITERAL", "NUMERICLITERAL", "IDENTIFIER", 
                      "FILENAME", "NEWLINE", "COMMENTLINE", "WS", "TEXT" ]

    RULE_startRule = 0
    RULE_compilerOptions = 1
    RULE_compilerXOpts = 2
    RULE_compilerOption = 3
    RULE_execCicsStatement = 4
    RULE_execSqlStatement = 5
    RULE_execSqlImsStatement = 6
    RULE_includeSource = 7
    RULE_copyStatement = 8
    RULE_copySource = 9
    RULE_copyLibrary = 10
    RULE_replacingPhrase = 11
    RULE_replaceArea = 12
    RULE_replaceByStatement = 13
    RULE_replaceOffStatement = 14
    RULE_replaceClause = 15
    RULE_directoryPhrase = 16
    RULE_familyPhrase = 17
    RULE_replaceable = 18
    RULE_replacement = 19
    RULE_ejectStatement = 20
    RULE_skipStatement = 21
    RULE_titleStatement = 22
    RULE_pseudoText = 23
    RULE_charData = 24
    RULE_charDataSql = 25
    RULE_charDataLine = 26
    RULE_cobolWord = 27
    RULE_literal = 28
    RULE_filename = 29
    RULE_charDataKeyword = 30

    ruleNames =  [ "startRule", "compilerOptions", "compilerXOpts", "compilerOption", 
                   "execCicsStatement", "execSqlStatement", "execSqlImsStatement", 
                   "includeSource", "copyStatement", "copySource", "copyLibrary", 
                   "replacingPhrase", "replaceArea", "replaceByStatement", 
                   "replaceOffStatement", "replaceClause", "directoryPhrase", 
                   "familyPhrase", "replaceable", "replacement", "ejectStatement", 
                   "skipStatement", "titleStatement", "pseudoText", "charData", 
                   "charDataSql", "charDataLine", "cobolWord", "literal", 
                   "filename", "charDataKeyword" ]

    EOF = Token.EOF
    ADATA=1
    ADV=2
    ALIAS=3
    ANSI=4
    ANY=5
    APOST=6
    AR=7
    ARITH=8
    AUTO=9
    AWO=10
    BIN=11
    BLOCK0=12
    BUF=13
    BUFSIZE=14
    BY=15
    CBL=16
    CBLCARD=17
    CICS=18
    CO=19
    COBOL2=20
    COBOL3=21
    CODEPAGE=22
    COMPAT=23
    COMPILE=24
    COPY=25
    CP=26
    CPP=27
    CPSM=28
    CS=29
    CURR=30
    CURRENCY=31
    DATA=32
    DATEPROC=33
    DBCS=34
    DD=35
    DEBUG=36
    DECK=37
    DIAGTRUNC=38
    DLI=39
    DLL=40
    DP=41
    DTR=42
    DU=43
    DUMP=44
    DYN=45
    DYNAM=46
    EDF=47
    EJECT=48
    EJPD=49
    EN=50
    ENGLISH=51
    END_EXEC=52
    EPILOG=53
    EXCI=54
    EXEC=55
    EXIT=56
    EXP=57
    EXPORTALL=58
    EXTEND=59
    FASTSRT=60
    FEPI=61
    FLAG=62
    FLAGSTD=63
    FSRT=64
    FULL=65
    GDS=66
    GRAPHIC=67
    HOOK=68
    IN=69
    INCLUDE=70
    INTDATE=71
    JA=72
    JP=73
    KA=74
    LANG=75
    LANGUAGE=76
    LC=77
    LEASM=78
    LENGTH=79
    LIB=80
    LILIAN=81
    LIN=82
    LINECOUNT=83
    LINKAGE=84
    LIST=85
    LM=86
    LONGMIXED=87
    LONGUPPER=88
    LPARENCHAR=89
    LU=90
    MAP=91
    MARGINS=92
    MAX=93
    MD=94
    MDECK=95
    MIG=96
    MIXED=97
    NAME=98
    NAT=99
    NATIONAL=100
    NATLANG=101
    NN=102
    NO=103
    NOADATA=104
    NOADV=105
    NOALIAS=106
    NOAWO=107
    NOBLOCK0=108
    NOC=109
    NOCBLCARD=110
    NOCICS=111
    NOCMPR2=112
    NOCOMPILE=113
    NOCPSM=114
    NOCURR=115
    NOCURRENCY=116
    NOD=117
    NODATEPROC=118
    NODBCS=119
    NODE=120
    NODEBUG=121
    NODECK=122
    NODIAGTRUNC=123
    NODLL=124
    NODU=125
    NODUMP=126
    NODP=127
    NODTR=128
    NODYN=129
    NODYNAM=130
    NOEDF=131
    NOEJPD=132
    NOEPILOG=133
    NOEXIT=134
    NOEXP=135
    NOEXPORTALL=136
    NOF=137
    NOFASTSRT=138
    NOFEPI=139
    NOFLAG=140
    NOFLAGMIG=141
    NOFLAGSTD=142
    NOFSRT=143
    NOGRAPHIC=144
    NOHOOK=145
    NOLENGTH=146
    NOLIB=147
    NOLINKAGE=148
    NOLIST=149
    NOMAP=150
    NOMD=151
    NOMDECK=152
    NONAME=153
    NONUM=154
    NONUMBER=155
    NOOBJ=156
    NOOBJECT=157
    NOOFF=158
    NOOFFSET=159
    NOOPSEQUENCE=160
    NOOPT=161
    NOOPTIMIZE=162
    NOOPTIONS=163
    NOP=164
    NOPFD=165
    NOPROLOG=166
    NORENT=167
    NOS=168
    NOSEP=169
    NOSEPARATE=170
    NOSEQ=171
    NOSOURCE=172
    NOSPIE=173
    NOSQL=174
    NOSQLC=175
    NOSQLCCSID=176
    NOSSR=177
    NOSSRANGE=178
    NOSTDTRUNC=179
    NOSEQUENCE=180
    NOTERM=181
    NOTERMINAL=182
    NOTEST=183
    NOTHREAD=184
    NOTRIG=185
    NOVBREF=186
    NOWD=187
    NOWORD=188
    NOX=189
    NOXREF=190
    NOZWB=191
    NS=192
    NSEQ=193
    NSYMBOL=194
    NUM=195
    NUMBER=196
    NUMPROC=197
    OBJ=198
    OBJECT=199
    OF=200
    OFF=201
    OFFSET=202
    ON=203
    OP=204
    OPMARGINS=205
    OPSEQUENCE=206
    OPT=207
    OPTFILE=208
    OPTIMIZE=209
    OPTIONS=210
    OUT=211
    OUTDD=212
    PFD=213
    PPTDBG=214
    PGMN=215
    PGMNAME=216
    PROCESS=217
    PROLOG=218
    QUOTE=219
    RENT=220
    REPLACE=221
    REPLACING=222
    RMODE=223
    RPARENCHAR=224
    SEP=225
    SEPARATE=226
    SEQ=227
    SEQUENCE=228
    SHORT=229
    SIZE=230
    SOURCE=231
    SP=232
    SPACE=233
    SPIE=234
    SQL=235
    SQLC=236
    SQLCCSID=237
    SQLIMS=238
    SKIP1=239
    SKIP2=240
    SKIP3=241
    SS=242
    SSR=243
    SSRANGE=244
    STD=245
    SUPPRESS=246
    SYSEIB=247
    SZ=248
    TERM=249
    TERMINAL=250
    TEST=251
    THREAD=252
    TITLE=253
    TRIG=254
    TRUNC=255
    UE=256
    UPPER=257
    VBREF=258
    WD=259
    WORD=260
    XMLPARSE=261
    XMLSS=262
    XOPTS=263
    XP=264
    XREF=265
    YEARWINDOW=266
    YW=267
    ZWB=268
    C_CHAR=269
    D_CHAR=270
    E_CHAR=271
    F_CHAR=272
    H_CHAR=273
    I_CHAR=274
    M_CHAR=275
    N_CHAR=276
    Q_CHAR=277
    S_CHAR=278
    U_CHAR=279
    W_CHAR=280
    X_CHAR=281
    COMMENTTAG=282
    COMMACHAR=283
    DOT=284
    DOUBLEEQUALCHAR=285
    NONNUMERICLITERAL=286
    NUMERICLITERAL=287
    IDENTIFIER=288
    FILENAME=289
    NEWLINE=290
    COMMENTLINE=291
    WS=292
    TEXT=293

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartRuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CobolPreprocessorParser.EOF, 0)

        def compilerOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CobolPreprocessorParser.CompilerOptionsContext)
            else:
                return self.getTypedRuleContext(CobolPreprocessorParser.CompilerOptionsContext,i)


        def copyStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CobolPreprocessorParser.CopyStatementContext)
            else:
                return self.getTypedRuleContext(CobolPreprocessorParser.CopyStatementContext,i)


        def execCicsStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CobolPreprocessorParser.ExecCicsStatementContext)
            else:
                return self.getTypedRuleContext(CobolPreprocessorParser.ExecCicsStatementContext,i)


        def execSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CobolPreprocessorParser.ExecSqlStatementContext)
            else:
                return self.getTypedRuleContext(CobolPreprocessorParser.ExecSqlStatementContext,i)


        def execSqlImsStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CobolPreprocessorParser.ExecSqlImsStatementContext)
            else:
                return self.getTypedRuleContext(CobolPreprocessorParser.ExecSqlImsStatementContext,i)


        def replaceOffStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CobolPreprocessorParser.ReplaceOffStatementContext)
            else:
                return self.getTypedRuleContext(CobolPreprocessorParser.ReplaceOffStatementContext,i)


        def replaceArea(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CobolPreprocessorParser.ReplaceAreaContext)
            else:
                return self.getTypedRuleContext(CobolPreprocessorParser.ReplaceAreaContext,i)


        def ejectStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CobolPreprocessorParser.EjectStatementContext)
            else:
                return self.getTypedRuleContext(CobolPreprocessorParser.EjectStatementContext,i)


        def skipStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CobolPreprocessorParser.SkipStatementContext)
            else:
                return self.getTypedRuleContext(CobolPreprocessorParser.SkipStatementContext,i)


        def titleStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CobolPreprocessorParser.TitleStatementContext)
            else:
                return self.getTypedRuleContext(CobolPreprocessorParser.TitleStatementContext,i)


        def charDataLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CobolPreprocessorParser.CharDataLineContext)
            else:
                return self.getTypedRuleContext(CobolPreprocessorParser.CharDataLineContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(CobolPreprocessorParser.NEWLINE)
            else:
                return self.getToken(CobolPreprocessorParser.NEWLINE, i)

        def getRuleIndex(self):
            return CobolPreprocessorParser.RULE_startRule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartRule" ):
                listener.enterStartRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartRule" ):
                listener.exitStartRule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartRule" ):
                return visitor.visitStartRule(self)
            else:
                return visitor.visitChildren(self)




    def startRule(self):

        localctx = CobolPreprocessorParser.StartRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_startRule)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 76
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & -2310346608841326594) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -16449) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -576460752303423489) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -18084767253659649) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 171194711791) != 0:
                self.state = 74
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 62
                    self.compilerOptions()
                    pass

                elif la_ == 2:
                    self.state = 63
                    self.copyStatement()
                    pass

                elif la_ == 3:
                    self.state = 64
                    self.execCicsStatement()
                    pass

                elif la_ == 4:
                    self.state = 65
                    self.execSqlStatement()
                    pass

                elif la_ == 5:
                    self.state = 66
                    self.execSqlImsStatement()
                    pass

                elif la_ == 6:
                    self.state = 67
                    self.replaceOffStatement()
                    pass

                elif la_ == 7:
                    self.state = 68
                    self.replaceArea()
                    pass

                elif la_ == 8:
                    self.state = 69
                    self.ejectStatement()
                    pass

                elif la_ == 9:
                    self.state = 70
                    self.skipStatement()
                    pass

                elif la_ == 10:
                    self.state = 71
                    self.titleStatement()
                    pass

                elif la_ == 11:
                    self.state = 72
                    self.charDataLine()
                    pass

                elif la_ == 12:
                    self.state = 73
                    self.match(CobolPreprocessorParser.NEWLINE)
                    pass


                self.state = 78
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 79
            self.match(CobolPreprocessorParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompilerOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCESS(self):
            return self.getToken(CobolPreprocessorParser.PROCESS, 0)

        def CBL(self):
            return self.getToken(CobolPreprocessorParser.CBL, 0)

        def compilerOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CobolPreprocessorParser.CompilerOptionContext)
            else:
                return self.getTypedRuleContext(CobolPreprocessorParser.CompilerOptionContext,i)


        def compilerXOpts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CobolPreprocessorParser.CompilerXOptsContext)
            else:
                return self.getTypedRuleContext(CobolPreprocessorParser.CompilerXOptsContext,i)


        def COMMACHAR(self, i:int=None):
            if i is None:
                return self.getTokens(CobolPreprocessorParser.COMMACHAR)
            else:
                return self.getToken(CobolPreprocessorParser.COMMACHAR, i)

        def getRuleIndex(self):
            return CobolPreprocessorParser.RULE_compilerOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilerOptions" ):
                listener.enterCompilerOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilerOptions" ):
                listener.exitCompilerOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompilerOptions" ):
                return visitor.visitCompilerOptions(self)
            else:
                return visitor.visitChildren(self)




    def compilerOptions(self):

        localctx = CobolPreprocessorParser.CompilerOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_compilerOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 81
            _la = self._input.LA(1)
            if not(_la==16 or _la==217):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 87 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 87
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 2, 6, 7, 8, 10, 12, 13, 14, 17, 18, 20, 21, 22, 24, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 53, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 71, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 91, 92, 94, 95, 98, 101, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216, 218, 219, 220, 223, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 243, 244, 247, 248, 249, 250, 251, 252, 255, 258, 259, 260, 261, 264, 265, 266, 267, 268, 269, 270, 272, 277, 278, 281, 283]:
                        self.state = 83
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==283:
                            self.state = 82
                            self.match(CobolPreprocessorParser.COMMACHAR)


                        self.state = 85
                        self.compilerOption()
                        pass
                    elif token in [263]:
                        self.state = 86
                        self.compilerXOpts()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 89 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompilerXOptsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XOPTS(self):
            return self.getToken(CobolPreprocessorParser.XOPTS, 0)

        def LPARENCHAR(self):
            return self.getToken(CobolPreprocessorParser.LPARENCHAR, 0)

        def compilerOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CobolPreprocessorParser.CompilerOptionContext)
            else:
                return self.getTypedRuleContext(CobolPreprocessorParser.CompilerOptionContext,i)


        def RPARENCHAR(self):
            return self.getToken(CobolPreprocessorParser.RPARENCHAR, 0)

        def COMMACHAR(self, i:int=None):
            if i is None:
                return self.getTokens(CobolPreprocessorParser.COMMACHAR)
            else:
                return self.getToken(CobolPreprocessorParser.COMMACHAR, i)

        def getRuleIndex(self):
            return CobolPreprocessorParser.RULE_compilerXOpts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilerXOpts" ):
                listener.enterCompilerXOpts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilerXOpts" ):
                listener.exitCompilerXOpts(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompilerXOpts" ):
                return visitor.visitCompilerXOpts(self)
            else:
                return visitor.visitChildren(self)




    def compilerXOpts(self):

        localctx = CobolPreprocessorParser.CompilerXOptsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_compilerXOpts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 91
            self.match(CobolPreprocessorParser.XOPTS)
            self.state = 92
            self.match(CobolPreprocessorParser.LPARENCHAR)
            self.state = 93
            self.compilerOption()
            self.state = 100
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & -639230256804891194) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -5339311376243) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -144121922584707089) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -6946732225628997889) != 0 or (((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 43540431) != 0:
                self.state = 95
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==283:
                    self.state = 94
                    self.match(CobolPreprocessorParser.COMMACHAR)


                self.state = 97
                self.compilerOption()
                self.state = 102
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 103
            self.match(CobolPreprocessorParser.RPARENCHAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompilerOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADATA(self):
            return self.getToken(CobolPreprocessorParser.ADATA, 0)

        def ADV(self):
            return self.getToken(CobolPreprocessorParser.ADV, 0)

        def APOST(self):
            return self.getToken(CobolPreprocessorParser.APOST, 0)

        def LPARENCHAR(self):
            return self.getToken(CobolPreprocessorParser.LPARENCHAR, 0)

        def RPARENCHAR(self):
            return self.getToken(CobolPreprocessorParser.RPARENCHAR, 0)

        def ARITH(self):
            return self.getToken(CobolPreprocessorParser.ARITH, 0)

        def AR(self):
            return self.getToken(CobolPreprocessorParser.AR, 0)

        def EXTEND(self):
            return self.getToken(CobolPreprocessorParser.EXTEND, 0)

        def E_CHAR(self, i:int=None):
            if i is None:
                return self.getTokens(CobolPreprocessorParser.E_CHAR)
            else:
                return self.getToken(CobolPreprocessorParser.E_CHAR, i)

        def COMPAT(self):
            return self.getToken(CobolPreprocessorParser.COMPAT, 0)

        def C_CHAR(self):
            return self.getToken(CobolPreprocessorParser.C_CHAR, 0)

        def AWO(self):
            return self.getToken(CobolPreprocessorParser.AWO, 0)

        def BLOCK0(self):
            return self.getToken(CobolPreprocessorParser.BLOCK0, 0)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CobolPreprocessorParser.LiteralContext)
            else:
                return self.getTypedRuleContext(CobolPreprocessorParser.LiteralContext,i)


        def BUFSIZE(self):
            return self.getToken(CobolPreprocessorParser.BUFSIZE, 0)

        def BUF(self):
            return self.getToken(CobolPreprocessorParser.BUF, 0)

        def CBLCARD(self):
            return self.getToken(CobolPreprocessorParser.CBLCARD, 0)

        def CICS(self):
            return self.getToken(CobolPreprocessorParser.CICS, 0)

        def COBOL2(self):
            return self.getToken(CobolPreprocessorParser.COBOL2, 0)

        def COBOL3(self):
            return self.getToken(CobolPreprocessorParser.COBOL3, 0)

        def CODEPAGE(self):
            return self.getToken(CobolPreprocessorParser.CODEPAGE, 0)

        def CP(self):
            return self.getToken(CobolPreprocessorParser.CP, 0)

        def COMPILE(self):
            return self.getToken(CobolPreprocessorParser.COMPILE, 0)

        def CPP(self):
            return self.getToken(CobolPreprocessorParser.CPP, 0)

        def CPSM(self):
            return self.getToken(CobolPreprocessorParser.CPSM, 0)

        def CURRENCY(self):
            return self.getToken(CobolPreprocessorParser.CURRENCY, 0)

        def CURR(self):
            return self.getToken(CobolPreprocessorParser.CURR, 0)

        def DATA(self):
            return self.getToken(CobolPreprocessorParser.DATA, 0)

        def DATEPROC(self):
            return self.getToken(CobolPreprocessorParser.DATEPROC, 0)

        def DP(self):
            return self.getToken(CobolPreprocessorParser.DP, 0)

        def COMMACHAR(self, i:int=None):
            if i is None:
                return self.getTokens(CobolPreprocessorParser.COMMACHAR)
            else:
                return self.getToken(CobolPreprocessorParser.COMMACHAR, i)

        def FLAG(self):
            return self.getToken(CobolPreprocessorParser.FLAG, 0)

        def NOFLAG(self):
            return self.getToken(CobolPreprocessorParser.NOFLAG, 0)

        def TRIG(self):
            return self.getToken(CobolPreprocessorParser.TRIG, 0)

        def NOTRIG(self):
            return self.getToken(CobolPreprocessorParser.NOTRIG, 0)

        def DBCS(self):
            return self.getToken(CobolPreprocessorParser.DBCS, 0)

        def DECK(self):
            return self.getToken(CobolPreprocessorParser.DECK, 0)

        def D_CHAR(self):
            return self.getToken(CobolPreprocessorParser.D_CHAR, 0)

        def DEBUG(self):
            return self.getToken(CobolPreprocessorParser.DEBUG, 0)

        def DIAGTRUNC(self):
            return self.getToken(CobolPreprocessorParser.DIAGTRUNC, 0)

        def DTR(self):
            return self.getToken(CobolPreprocessorParser.DTR, 0)

        def DLL(self):
            return self.getToken(CobolPreprocessorParser.DLL, 0)

        def DUMP(self):
            return self.getToken(CobolPreprocessorParser.DUMP, 0)

        def DU(self):
            return self.getToken(CobolPreprocessorParser.DU, 0)

        def DYNAM(self):
            return self.getToken(CobolPreprocessorParser.DYNAM, 0)

        def DYN(self):
            return self.getToken(CobolPreprocessorParser.DYN, 0)

        def EDF(self):
            return self.getToken(CobolPreprocessorParser.EDF, 0)

        def EPILOG(self):
            return self.getToken(CobolPreprocessorParser.EPILOG, 0)

        def EXIT(self):
            return self.getToken(CobolPreprocessorParser.EXIT, 0)

        def EXPORTALL(self):
            return self.getToken(CobolPreprocessorParser.EXPORTALL, 0)

        def EXP(self):
            return self.getToken(CobolPreprocessorParser.EXP, 0)

        def FASTSRT(self):
            return self.getToken(CobolPreprocessorParser.FASTSRT, 0)

        def FSRT(self):
            return self.getToken(CobolPreprocessorParser.FSRT, 0)

        def FEPI(self):
            return self.getToken(CobolPreprocessorParser.FEPI, 0)

        def F_CHAR(self):
            return self.getToken(CobolPreprocessorParser.F_CHAR, 0)

        def I_CHAR(self, i:int=None):
            if i is None:
                return self.getTokens(CobolPreprocessorParser.I_CHAR)
            else:
                return self.getToken(CobolPreprocessorParser.I_CHAR, i)

        def S_CHAR(self, i:int=None):
            if i is None:
                return self.getTokens(CobolPreprocessorParser.S_CHAR)
            else:
                return self.getToken(CobolPreprocessorParser.S_CHAR, i)

        def U_CHAR(self, i:int=None):
            if i is None:
                return self.getTokens(CobolPreprocessorParser.U_CHAR)
            else:
                return self.getToken(CobolPreprocessorParser.U_CHAR, i)

        def W_CHAR(self, i:int=None):
            if i is None:
                return self.getTokens(CobolPreprocessorParser.W_CHAR)
            else:
                return self.getToken(CobolPreprocessorParser.W_CHAR, i)

        def FLAGSTD(self):
            return self.getToken(CobolPreprocessorParser.FLAGSTD, 0)

        def M_CHAR(self):
            return self.getToken(CobolPreprocessorParser.M_CHAR, 0)

        def H_CHAR(self):
            return self.getToken(CobolPreprocessorParser.H_CHAR, 0)

        def DD(self):
            return self.getToken(CobolPreprocessorParser.DD, 0)

        def N_CHAR(self):
            return self.getToken(CobolPreprocessorParser.N_CHAR, 0)

        def NN(self):
            return self.getToken(CobolPreprocessorParser.NN, 0)

        def SS(self):
            return self.getToken(CobolPreprocessorParser.SS, 0)

        def GDS(self):
            return self.getToken(CobolPreprocessorParser.GDS, 0)

        def GRAPHIC(self):
            return self.getToken(CobolPreprocessorParser.GRAPHIC, 0)

        def INTDATE(self):
            return self.getToken(CobolPreprocessorParser.INTDATE, 0)

        def ANSI(self):
            return self.getToken(CobolPreprocessorParser.ANSI, 0)

        def LILIAN(self):
            return self.getToken(CobolPreprocessorParser.LILIAN, 0)

        def LANGUAGE(self):
            return self.getToken(CobolPreprocessorParser.LANGUAGE, 0)

        def LANG(self):
            return self.getToken(CobolPreprocessorParser.LANG, 0)

        def ENGLISH(self):
            return self.getToken(CobolPreprocessorParser.ENGLISH, 0)

        def CS(self):
            return self.getToken(CobolPreprocessorParser.CS, 0)

        def EN(self):
            return self.getToken(CobolPreprocessorParser.EN, 0)

        def JA(self):
            return self.getToken(CobolPreprocessorParser.JA, 0)

        def JP(self):
            return self.getToken(CobolPreprocessorParser.JP, 0)

        def KA(self):
            return self.getToken(CobolPreprocessorParser.KA, 0)

        def UE(self):
            return self.getToken(CobolPreprocessorParser.UE, 0)

        def LEASM(self):
            return self.getToken(CobolPreprocessorParser.LEASM, 0)

        def LENGTH(self):
            return self.getToken(CobolPreprocessorParser.LENGTH, 0)

        def LIB(self):
            return self.getToken(CobolPreprocessorParser.LIB, 0)

        def LIN(self):
            return self.getToken(CobolPreprocessorParser.LIN, 0)

        def LINECOUNT(self):
            return self.getToken(CobolPreprocessorParser.LINECOUNT, 0)

        def LC(self):
            return self.getToken(CobolPreprocessorParser.LC, 0)

        def LINKAGE(self):
            return self.getToken(CobolPreprocessorParser.LINKAGE, 0)

        def LIST(self):
            return self.getToken(CobolPreprocessorParser.LIST, 0)

        def MAP(self):
            return self.getToken(CobolPreprocessorParser.MAP, 0)

        def MARGINS(self):
            return self.getToken(CobolPreprocessorParser.MARGINS, 0)

        def MDECK(self):
            return self.getToken(CobolPreprocessorParser.MDECK, 0)

        def MD(self):
            return self.getToken(CobolPreprocessorParser.MD, 0)

        def NOC(self):
            return self.getToken(CobolPreprocessorParser.NOC, 0)

        def NOCOMPILE(self):
            return self.getToken(CobolPreprocessorParser.NOCOMPILE, 0)

        def NAME(self):
            return self.getToken(CobolPreprocessorParser.NAME, 0)

        def ALIAS(self):
            return self.getToken(CobolPreprocessorParser.ALIAS, 0)

        def NOALIAS(self):
            return self.getToken(CobolPreprocessorParser.NOALIAS, 0)

        def NATLANG(self):
            return self.getToken(CobolPreprocessorParser.NATLANG, 0)

        def NOADATA(self):
            return self.getToken(CobolPreprocessorParser.NOADATA, 0)

        def NOADV(self):
            return self.getToken(CobolPreprocessorParser.NOADV, 0)

        def NOAWO(self):
            return self.getToken(CobolPreprocessorParser.NOAWO, 0)

        def NOBLOCK0(self):
            return self.getToken(CobolPreprocessorParser.NOBLOCK0, 0)

        def NOCBLCARD(self):
            return self.getToken(CobolPreprocessorParser.NOCBLCARD, 0)

        def NOCICS(self):
            return self.getToken(CobolPreprocessorParser.NOCICS, 0)

        def NOCMPR2(self):
            return self.getToken(CobolPreprocessorParser.NOCMPR2, 0)

        def NOCPSM(self):
            return self.getToken(CobolPreprocessorParser.NOCPSM, 0)

        def NOCURRENCY(self):
            return self.getToken(CobolPreprocessorParser.NOCURRENCY, 0)

        def NOCURR(self):
            return self.getToken(CobolPreprocessorParser.NOCURR, 0)

        def NODATEPROC(self):
            return self.getToken(CobolPreprocessorParser.NODATEPROC, 0)

        def NODP(self):
            return self.getToken(CobolPreprocessorParser.NODP, 0)

        def NODBCS(self):
            return self.getToken(CobolPreprocessorParser.NODBCS, 0)

        def NODEBUG(self):
            return self.getToken(CobolPreprocessorParser.NODEBUG, 0)

        def NODECK(self):
            return self.getToken(CobolPreprocessorParser.NODECK, 0)

        def NOD(self):
            return self.getToken(CobolPreprocessorParser.NOD, 0)

        def NODLL(self):
            return self.getToken(CobolPreprocessorParser.NODLL, 0)

        def NODE(self):
            return self.getToken(CobolPreprocessorParser.NODE, 0)

        def NODUMP(self):
            return self.getToken(CobolPreprocessorParser.NODUMP, 0)

        def NODU(self):
            return self.getToken(CobolPreprocessorParser.NODU, 0)

        def NODIAGTRUNC(self):
            return self.getToken(CobolPreprocessorParser.NODIAGTRUNC, 0)

        def NODTR(self):
            return self.getToken(CobolPreprocessorParser.NODTR, 0)

        def NODYNAM(self):
            return self.getToken(CobolPreprocessorParser.NODYNAM, 0)

        def NODYN(self):
            return self.getToken(CobolPreprocessorParser.NODYN, 0)

        def NOEDF(self):
            return self.getToken(CobolPreprocessorParser.NOEDF, 0)

        def NOEPILOG(self):
            return self.getToken(CobolPreprocessorParser.NOEPILOG, 0)

        def NOEXIT(self):
            return self.getToken(CobolPreprocessorParser.NOEXIT, 0)

        def NOEXPORTALL(self):
            return self.getToken(CobolPreprocessorParser.NOEXPORTALL, 0)

        def NOEXP(self):
            return self.getToken(CobolPreprocessorParser.NOEXP, 0)

        def NOFASTSRT(self):
            return self.getToken(CobolPreprocessorParser.NOFASTSRT, 0)

        def NOFSRT(self):
            return self.getToken(CobolPreprocessorParser.NOFSRT, 0)

        def NOFEPI(self):
            return self.getToken(CobolPreprocessorParser.NOFEPI, 0)

        def NOF(self):
            return self.getToken(CobolPreprocessorParser.NOF, 0)

        def NOFLAGMIG(self):
            return self.getToken(CobolPreprocessorParser.NOFLAGMIG, 0)

        def NOFLAGSTD(self):
            return self.getToken(CobolPreprocessorParser.NOFLAGSTD, 0)

        def NOGRAPHIC(self):
            return self.getToken(CobolPreprocessorParser.NOGRAPHIC, 0)

        def NOLENGTH(self):
            return self.getToken(CobolPreprocessorParser.NOLENGTH, 0)

        def NOLIB(self):
            return self.getToken(CobolPreprocessorParser.NOLIB, 0)

        def NOLINKAGE(self):
            return self.getToken(CobolPreprocessorParser.NOLINKAGE, 0)

        def NOLIST(self):
            return self.getToken(CobolPreprocessorParser.NOLIST, 0)

        def NOMAP(self):
            return self.getToken(CobolPreprocessorParser.NOMAP, 0)

        def NOMDECK(self):
            return self.getToken(CobolPreprocessorParser.NOMDECK, 0)

        def NOMD(self):
            return self.getToken(CobolPreprocessorParser.NOMD, 0)

        def NONAME(self):
            return self.getToken(CobolPreprocessorParser.NONAME, 0)

        def NONUMBER(self):
            return self.getToken(CobolPreprocessorParser.NONUMBER, 0)

        def NONUM(self):
            return self.getToken(CobolPreprocessorParser.NONUM, 0)

        def NOOBJECT(self):
            return self.getToken(CobolPreprocessorParser.NOOBJECT, 0)

        def NOOBJ(self):
            return self.getToken(CobolPreprocessorParser.NOOBJ, 0)

        def NOOFFSET(self):
            return self.getToken(CobolPreprocessorParser.NOOFFSET, 0)

        def NOOFF(self):
            return self.getToken(CobolPreprocessorParser.NOOFF, 0)

        def NOOPSEQUENCE(self):
            return self.getToken(CobolPreprocessorParser.NOOPSEQUENCE, 0)

        def NOOPTIMIZE(self):
            return self.getToken(CobolPreprocessorParser.NOOPTIMIZE, 0)

        def NOOPT(self):
            return self.getToken(CobolPreprocessorParser.NOOPT, 0)

        def NOOPTIONS(self):
            return self.getToken(CobolPreprocessorParser.NOOPTIONS, 0)

        def NOP(self):
            return self.getToken(CobolPreprocessorParser.NOP, 0)

        def NOPROLOG(self):
            return self.getToken(CobolPreprocessorParser.NOPROLOG, 0)

        def NORENT(self):
            return self.getToken(CobolPreprocessorParser.NORENT, 0)

        def NOSEQUENCE(self):
            return self.getToken(CobolPreprocessorParser.NOSEQUENCE, 0)

        def NOSEQ(self):
            return self.getToken(CobolPreprocessorParser.NOSEQ, 0)

        def NOSOURCE(self):
            return self.getToken(CobolPreprocessorParser.NOSOURCE, 0)

        def NOS(self):
            return self.getToken(CobolPreprocessorParser.NOS, 0)

        def NOSPIE(self):
            return self.getToken(CobolPreprocessorParser.NOSPIE, 0)

        def NOSQL(self):
            return self.getToken(CobolPreprocessorParser.NOSQL, 0)

        def NOSQLCCSID(self):
            return self.getToken(CobolPreprocessorParser.NOSQLCCSID, 0)

        def NOSQLC(self):
            return self.getToken(CobolPreprocessorParser.NOSQLC, 0)

        def NOSSRANGE(self):
            return self.getToken(CobolPreprocessorParser.NOSSRANGE, 0)

        def NOSSR(self):
            return self.getToken(CobolPreprocessorParser.NOSSR, 0)

        def NOSTDTRUNC(self):
            return self.getToken(CobolPreprocessorParser.NOSTDTRUNC, 0)

        def NOTERMINAL(self):
            return self.getToken(CobolPreprocessorParser.NOTERMINAL, 0)

        def NOTERM(self):
            return self.getToken(CobolPreprocessorParser.NOTERM, 0)

        def NOTEST(self):
            return self.getToken(CobolPreprocessorParser.NOTEST, 0)

        def NOTHREAD(self):
            return self.getToken(CobolPreprocessorParser.NOTHREAD, 0)

        def NOVBREF(self):
            return self.getToken(CobolPreprocessorParser.NOVBREF, 0)

        def NOWORD(self):
            return self.getToken(CobolPreprocessorParser.NOWORD, 0)

        def NOWD(self):
            return self.getToken(CobolPreprocessorParser.NOWD, 0)

        def NSEQ(self):
            return self.getToken(CobolPreprocessorParser.NSEQ, 0)

        def NSYMBOL(self):
            return self.getToken(CobolPreprocessorParser.NSYMBOL, 0)

        def NS(self):
            return self.getToken(CobolPreprocessorParser.NS, 0)

        def NATIONAL(self):
            return self.getToken(CobolPreprocessorParser.NATIONAL, 0)

        def NAT(self):
            return self.getToken(CobolPreprocessorParser.NAT, 0)

        def NOXREF(self):
            return self.getToken(CobolPreprocessorParser.NOXREF, 0)

        def NOX(self):
            return self.getToken(CobolPreprocessorParser.NOX, 0)

        def NOZWB(self):
            return self.getToken(CobolPreprocessorParser.NOZWB, 0)

        def NUMBER(self):
            return self.getToken(CobolPreprocessorParser.NUMBER, 0)

        def NUM(self):
            return self.getToken(CobolPreprocessorParser.NUM, 0)

        def NUMPROC(self):
            return self.getToken(CobolPreprocessorParser.NUMPROC, 0)

        def MIG(self):
            return self.getToken(CobolPreprocessorParser.MIG, 0)

        def NOPFD(self):
            return self.getToken(CobolPreprocessorParser.NOPFD, 0)

        def PFD(self):
            return self.getToken(CobolPreprocessorParser.PFD, 0)

        def OBJECT(self):
            return self.getToken(CobolPreprocessorParser.OBJECT, 0)

        def OBJ(self):
            return self.getToken(CobolPreprocessorParser.OBJ, 0)

        def OFFSET(self):
            return self.getToken(CobolPreprocessorParser.OFFSET, 0)

        def OFF(self):
            return self.getToken(CobolPreprocessorParser.OFF, 0)

        def OPMARGINS(self):
            return self.getToken(CobolPreprocessorParser.OPMARGINS, 0)

        def OPSEQUENCE(self):
            return self.getToken(CobolPreprocessorParser.OPSEQUENCE, 0)

        def OPTIMIZE(self):
            return self.getToken(CobolPreprocessorParser.OPTIMIZE, 0)

        def OPT(self):
            return self.getToken(CobolPreprocessorParser.OPT, 0)

        def FULL(self):
            return self.getToken(CobolPreprocessorParser.FULL, 0)

        def STD(self):
            return self.getToken(CobolPreprocessorParser.STD, 0)

        def OPTFILE(self):
            return self.getToken(CobolPreprocessorParser.OPTFILE, 0)

        def OPTIONS(self):
            return self.getToken(CobolPreprocessorParser.OPTIONS, 0)

        def OP(self):
            return self.getToken(CobolPreprocessorParser.OP, 0)

        def cobolWord(self):
            return self.getTypedRuleContext(CobolPreprocessorParser.CobolWordContext,0)


        def OUTDD(self):
            return self.getToken(CobolPreprocessorParser.OUTDD, 0)

        def OUT(self):
            return self.getToken(CobolPreprocessorParser.OUT, 0)

        def PGMNAME(self):
            return self.getToken(CobolPreprocessorParser.PGMNAME, 0)

        def PGMN(self):
            return self.getToken(CobolPreprocessorParser.PGMN, 0)

        def CO(self):
            return self.getToken(CobolPreprocessorParser.CO, 0)

        def LM(self):
            return self.getToken(CobolPreprocessorParser.LM, 0)

        def LONGMIXED(self):
            return self.getToken(CobolPreprocessorParser.LONGMIXED, 0)

        def LONGUPPER(self):
            return self.getToken(CobolPreprocessorParser.LONGUPPER, 0)

        def LU(self):
            return self.getToken(CobolPreprocessorParser.LU, 0)

        def MIXED(self):
            return self.getToken(CobolPreprocessorParser.MIXED, 0)

        def UPPER(self):
            return self.getToken(CobolPreprocessorParser.UPPER, 0)

        def PROLOG(self):
            return self.getToken(CobolPreprocessorParser.PROLOG, 0)

        def QUOTE(self):
            return self.getToken(CobolPreprocessorParser.QUOTE, 0)

        def Q_CHAR(self):
            return self.getToken(CobolPreprocessorParser.Q_CHAR, 0)

        def RENT(self):
            return self.getToken(CobolPreprocessorParser.RENT, 0)

        def RMODE(self):
            return self.getToken(CobolPreprocessorParser.RMODE, 0)

        def ANY(self):
            return self.getToken(CobolPreprocessorParser.ANY, 0)

        def AUTO(self):
            return self.getToken(CobolPreprocessorParser.AUTO, 0)

        def SEQUENCE(self):
            return self.getToken(CobolPreprocessorParser.SEQUENCE, 0)

        def SEQ(self):
            return self.getToken(CobolPreprocessorParser.SEQ, 0)

        def SIZE(self):
            return self.getToken(CobolPreprocessorParser.SIZE, 0)

        def SZ(self):
            return self.getToken(CobolPreprocessorParser.SZ, 0)

        def MAX(self):
            return self.getToken(CobolPreprocessorParser.MAX, 0)

        def SOURCE(self):
            return self.getToken(CobolPreprocessorParser.SOURCE, 0)

        def SP(self):
            return self.getToken(CobolPreprocessorParser.SP, 0)

        def SPACE(self):
            return self.getToken(CobolPreprocessorParser.SPACE, 0)

        def SPIE(self):
            return self.getToken(CobolPreprocessorParser.SPIE, 0)

        def SQL(self):
            return self.getToken(CobolPreprocessorParser.SQL, 0)

        def SQLCCSID(self):
            return self.getToken(CobolPreprocessorParser.SQLCCSID, 0)

        def SQLC(self):
            return self.getToken(CobolPreprocessorParser.SQLC, 0)

        def SSRANGE(self):
            return self.getToken(CobolPreprocessorParser.SSRANGE, 0)

        def SSR(self):
            return self.getToken(CobolPreprocessorParser.SSR, 0)

        def SYSEIB(self):
            return self.getToken(CobolPreprocessorParser.SYSEIB, 0)

        def TERMINAL(self):
            return self.getToken(CobolPreprocessorParser.TERMINAL, 0)

        def TERM(self):
            return self.getToken(CobolPreprocessorParser.TERM, 0)

        def TEST(self):
            return self.getToken(CobolPreprocessorParser.TEST, 0)

        def HOOK(self):
            return self.getToken(CobolPreprocessorParser.HOOK, 0)

        def NOHOOK(self):
            return self.getToken(CobolPreprocessorParser.NOHOOK, 0)

        def SEP(self):
            return self.getToken(CobolPreprocessorParser.SEP, 0)

        def SEPARATE(self):
            return self.getToken(CobolPreprocessorParser.SEPARATE, 0)

        def NOSEP(self):
            return self.getToken(CobolPreprocessorParser.NOSEP, 0)

        def NOSEPARATE(self):
            return self.getToken(CobolPreprocessorParser.NOSEPARATE, 0)

        def EJPD(self):
            return self.getToken(CobolPreprocessorParser.EJPD, 0)

        def NOEJPD(self):
            return self.getToken(CobolPreprocessorParser.NOEJPD, 0)

        def THREAD(self):
            return self.getToken(CobolPreprocessorParser.THREAD, 0)

        def TRUNC(self):
            return self.getToken(CobolPreprocessorParser.TRUNC, 0)

        def BIN(self):
            return self.getToken(CobolPreprocessorParser.BIN, 0)

        def VBREF(self):
            return self.getToken(CobolPreprocessorParser.VBREF, 0)

        def WORD(self):
            return self.getToken(CobolPreprocessorParser.WORD, 0)

        def WD(self):
            return self.getToken(CobolPreprocessorParser.WD, 0)

        def XMLPARSE(self):
            return self.getToken(CobolPreprocessorParser.XMLPARSE, 0)

        def XP(self):
            return self.getToken(CobolPreprocessorParser.XP, 0)

        def XMLSS(self):
            return self.getToken(CobolPreprocessorParser.XMLSS, 0)

        def X_CHAR(self):
            return self.getToken(CobolPreprocessorParser.X_CHAR, 0)

        def XREF(self):
            return self.getToken(CobolPreprocessorParser.XREF, 0)

        def SHORT(self):
            return self.getToken(CobolPreprocessorParser.SHORT, 0)

        def YEARWINDOW(self):
            return self.getToken(CobolPreprocessorParser.YEARWINDOW, 0)

        def YW(self):
            return self.getToken(CobolPreprocessorParser.YW, 0)

        def ZWB(self):
            return self.getToken(CobolPreprocessorParser.ZWB, 0)

        def getRuleIndex(self):
            return CobolPreprocessorParser.RULE_compilerOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilerOption" ):
                listener.enterCompilerOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilerOption" ):
                listener.exitCompilerOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompilerOption" ):
                return visitor.visitCompilerOption(self)
            else:
                return visitor.visitChildren(self)




    def compilerOption(self):

        localctx = CobolPreprocessorParser.CompilerOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_compilerOption)
        self._la = 0 # Token type
        try:
            self.state = 447
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 105
                self.match(CobolPreprocessorParser.ADATA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 106
                self.match(CobolPreprocessorParser.ADV)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 107
                self.match(CobolPreprocessorParser.APOST)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 108
                _la = self._input.LA(1)
                if not(_la==7 or _la==8):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 109
                self.match(CobolPreprocessorParser.LPARENCHAR)
                self.state = 110
                _la = self._input.LA(1)
                if not(_la==23 or _la==59 or _la==269 or _la==271):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 111
                self.match(CobolPreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 112
                self.match(CobolPreprocessorParser.AWO)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 113
                self.match(CobolPreprocessorParser.BLOCK0)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 114
                _la = self._input.LA(1)
                if not(_la==13 or _la==14):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 115
                self.match(CobolPreprocessorParser.LPARENCHAR)
                self.state = 116
                self.literal()
                self.state = 117
                self.match(CobolPreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 119
                self.match(CobolPreprocessorParser.CBLCARD)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 120
                self.match(CobolPreprocessorParser.CICS)
                self.state = 125
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                if la_ == 1:
                    self.state = 121
                    self.match(CobolPreprocessorParser.LPARENCHAR)
                    self.state = 122
                    self.literal()
                    self.state = 123
                    self.match(CobolPreprocessorParser.RPARENCHAR)


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 127
                self.match(CobolPreprocessorParser.COBOL2)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 128
                self.match(CobolPreprocessorParser.COBOL3)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 129
                _la = self._input.LA(1)
                if not(_la==22 or _la==26):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 130
                self.match(CobolPreprocessorParser.LPARENCHAR)
                self.state = 131
                self.literal()
                self.state = 132
                self.match(CobolPreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 134
                _la = self._input.LA(1)
                if not(_la==24 or _la==269):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 135
                self.match(CobolPreprocessorParser.CPP)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 136
                self.match(CobolPreprocessorParser.CPSM)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 137
                _la = self._input.LA(1)
                if not(_la==30 or _la==31):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 138
                self.match(CobolPreprocessorParser.LPARENCHAR)
                self.state = 139
                self.literal()
                self.state = 140
                self.match(CobolPreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 142
                self.match(CobolPreprocessorParser.DATA)
                self.state = 143
                self.match(CobolPreprocessorParser.LPARENCHAR)
                self.state = 144
                self.literal()
                self.state = 145
                self.match(CobolPreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 147
                _la = self._input.LA(1)
                if not(_la==33 or _la==41):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 159
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 148
                    self.match(CobolPreprocessorParser.LPARENCHAR)
                    self.state = 150
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==62 or _la==140:
                        self.state = 149
                        _la = self._input.LA(1)
                        if not(_la==62 or _la==140):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 153
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==283:
                        self.state = 152
                        self.match(CobolPreprocessorParser.COMMACHAR)


                    self.state = 156
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==185 or _la==254:
                        self.state = 155
                        _la = self._input.LA(1)
                        if not(_la==185 or _la==254):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 158
                    self.match(CobolPreprocessorParser.RPARENCHAR)


                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 161
                self.match(CobolPreprocessorParser.DBCS)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 162
                _la = self._input.LA(1)
                if not(_la==37 or _la==270):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 163
                self.match(CobolPreprocessorParser.DEBUG)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 164
                _la = self._input.LA(1)
                if not(_la==38 or _la==42):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 165
                self.match(CobolPreprocessorParser.DLL)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 166
                _la = self._input.LA(1)
                if not(_la==43 or _la==44):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 167
                _la = self._input.LA(1)
                if not(_la==45 or _la==46):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 168
                self.match(CobolPreprocessorParser.EDF)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 169
                self.match(CobolPreprocessorParser.EPILOG)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 170
                self.match(CobolPreprocessorParser.EXIT)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 171
                _la = self._input.LA(1)
                if not(_la==57 or _la==58):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 172
                _la = self._input.LA(1)
                if not(_la==60 or _la==64):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 173
                self.match(CobolPreprocessorParser.FEPI)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 174
                _la = self._input.LA(1)
                if not(_la==62 or _la==272):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 175
                self.match(CobolPreprocessorParser.LPARENCHAR)
                self.state = 176
                _la = self._input.LA(1)
                if not((((_la - 271)) & ~0x3f) == 0 and ((1 << (_la - 271)) & 905) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 179
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==283:
                    self.state = 177
                    self.match(CobolPreprocessorParser.COMMACHAR)
                    self.state = 178
                    _la = self._input.LA(1)
                    if not((((_la - 271)) & ~0x3f) == 0 and ((1 << (_la - 271)) & 905) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 181
                self.match(CobolPreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 182
                self.match(CobolPreprocessorParser.FLAGSTD)
                self.state = 183
                self.match(CobolPreprocessorParser.LPARENCHAR)
                self.state = 184
                _la = self._input.LA(1)
                if not((((_la - 273)) & ~0x3f) == 0 and ((1 << (_la - 273)) & 7) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 187
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==283:
                    self.state = 185
                    self.match(CobolPreprocessorParser.COMMACHAR)
                    self.state = 186
                    _la = self._input.LA(1)
                    if not(_la==35 or _la==102 or (((_la - 242)) & ~0x3f) == 0 and ((1 << (_la - 242)) & 86167781377) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 189
                self.match(CobolPreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 190
                self.match(CobolPreprocessorParser.GDS)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 191
                self.match(CobolPreprocessorParser.GRAPHIC)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 192
                self.match(CobolPreprocessorParser.INTDATE)
                self.state = 193
                self.match(CobolPreprocessorParser.LPARENCHAR)
                self.state = 194
                _la = self._input.LA(1)
                if not(_la==4 or _la==81):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 195
                self.match(CobolPreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 196
                _la = self._input.LA(1)
                if not(_la==75 or _la==76):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 197
                self.match(CobolPreprocessorParser.LPARENCHAR)
                self.state = 198
                _la = self._input.LA(1)
                if not((((_la - 29)) & ~0x3f) == 0 and ((1 << (_la - 29)) & 61572657446913) != 0 or _la==256):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 199
                self.match(CobolPreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 200
                self.match(CobolPreprocessorParser.LEASM)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 201
                self.match(CobolPreprocessorParser.LENGTH)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 202
                self.match(CobolPreprocessorParser.LIB)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 203
                self.match(CobolPreprocessorParser.LIN)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 204
                _la = self._input.LA(1)
                if not(_la==77 or _la==83):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 205
                self.match(CobolPreprocessorParser.LPARENCHAR)
                self.state = 206
                self.literal()
                self.state = 207
                self.match(CobolPreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 209
                self.match(CobolPreprocessorParser.LINKAGE)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 210
                self.match(CobolPreprocessorParser.LIST)
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 211
                self.match(CobolPreprocessorParser.MAP)
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 212
                self.match(CobolPreprocessorParser.MARGINS)
                self.state = 213
                self.match(CobolPreprocessorParser.LPARENCHAR)
                self.state = 214
                self.literal()
                self.state = 215
                self.match(CobolPreprocessorParser.COMMACHAR)
                self.state = 216
                self.literal()
                self.state = 219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==283:
                    self.state = 217
                    self.match(CobolPreprocessorParser.COMMACHAR)
                    self.state = 218
                    self.literal()


                self.state = 221
                self.match(CobolPreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 223
                _la = self._input.LA(1)
                if not(_la==94 or _la==95):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 227
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                if la_ == 1:
                    self.state = 224
                    self.match(CobolPreprocessorParser.LPARENCHAR)
                    self.state = 225
                    _la = self._input.LA(1)
                    if not(_la==24 or _la==109 or _la==113 or _la==269):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 226
                    self.match(CobolPreprocessorParser.RPARENCHAR)


                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 229
                self.match(CobolPreprocessorParser.NAME)
                self.state = 233
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                if la_ == 1:
                    self.state = 230
                    self.match(CobolPreprocessorParser.LPARENCHAR)
                    self.state = 231
                    _la = self._input.LA(1)
                    if not(_la==3 or _la==106):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 232
                    self.match(CobolPreprocessorParser.RPARENCHAR)


                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 235
                self.match(CobolPreprocessorParser.NATLANG)
                self.state = 236
                self.match(CobolPreprocessorParser.LPARENCHAR)
                self.state = 237
                _la = self._input.LA(1)
                if not((((_la - 29)) & ~0x3f) == 0 and ((1 << (_la - 29)) & 35184374185985) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 238
                self.match(CobolPreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 239
                self.match(CobolPreprocessorParser.NOADATA)
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 240
                self.match(CobolPreprocessorParser.NOADV)
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 241
                self.match(CobolPreprocessorParser.NOAWO)
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 242
                self.match(CobolPreprocessorParser.NOBLOCK0)
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 243
                self.match(CobolPreprocessorParser.NOCBLCARD)
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 244
                self.match(CobolPreprocessorParser.NOCICS)
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 245
                self.match(CobolPreprocessorParser.NOCMPR2)
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 246
                _la = self._input.LA(1)
                if not(_la==109 or _la==113):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 250
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
                if la_ == 1:
                    self.state = 247
                    self.match(CobolPreprocessorParser.LPARENCHAR)
                    self.state = 248
                    _la = self._input.LA(1)
                    if not((((_la - 271)) & ~0x3f) == 0 and ((1 << (_la - 271)) & 641) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 249
                    self.match(CobolPreprocessorParser.RPARENCHAR)


                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 252
                self.match(CobolPreprocessorParser.NOCPSM)
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 253
                _la = self._input.LA(1)
                if not(_la==115 or _la==116):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 254
                _la = self._input.LA(1)
                if not(_la==118 or _la==127):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 255
                self.match(CobolPreprocessorParser.NODBCS)
                pass

            elif la_ == 62:
                self.enterOuterAlt(localctx, 62)
                self.state = 256
                self.match(CobolPreprocessorParser.NODEBUG)
                pass

            elif la_ == 63:
                self.enterOuterAlt(localctx, 63)
                self.state = 257
                _la = self._input.LA(1)
                if not(_la==117 or _la==122):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 64:
                self.enterOuterAlt(localctx, 64)
                self.state = 258
                self.match(CobolPreprocessorParser.NODLL)
                pass

            elif la_ == 65:
                self.enterOuterAlt(localctx, 65)
                self.state = 259
                self.match(CobolPreprocessorParser.NODE)
                pass

            elif la_ == 66:
                self.enterOuterAlt(localctx, 66)
                self.state = 260
                _la = self._input.LA(1)
                if not(_la==125 or _la==126):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 67:
                self.enterOuterAlt(localctx, 67)
                self.state = 261
                _la = self._input.LA(1)
                if not(_la==123 or _la==128):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 68:
                self.enterOuterAlt(localctx, 68)
                self.state = 262
                _la = self._input.LA(1)
                if not(_la==129 or _la==130):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 69:
                self.enterOuterAlt(localctx, 69)
                self.state = 263
                self.match(CobolPreprocessorParser.NOEDF)
                pass

            elif la_ == 70:
                self.enterOuterAlt(localctx, 70)
                self.state = 264
                self.match(CobolPreprocessorParser.NOEPILOG)
                pass

            elif la_ == 71:
                self.enterOuterAlt(localctx, 71)
                self.state = 265
                self.match(CobolPreprocessorParser.NOEXIT)
                pass

            elif la_ == 72:
                self.enterOuterAlt(localctx, 72)
                self.state = 266
                _la = self._input.LA(1)
                if not(_la==135 or _la==136):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 73:
                self.enterOuterAlt(localctx, 73)
                self.state = 267
                _la = self._input.LA(1)
                if not(_la==138 or _la==143):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 74:
                self.enterOuterAlt(localctx, 74)
                self.state = 268
                self.match(CobolPreprocessorParser.NOFEPI)
                pass

            elif la_ == 75:
                self.enterOuterAlt(localctx, 75)
                self.state = 269
                _la = self._input.LA(1)
                if not(_la==137 or _la==140):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 76:
                self.enterOuterAlt(localctx, 76)
                self.state = 270
                self.match(CobolPreprocessorParser.NOFLAGMIG)
                pass

            elif la_ == 77:
                self.enterOuterAlt(localctx, 77)
                self.state = 271
                self.match(CobolPreprocessorParser.NOFLAGSTD)
                pass

            elif la_ == 78:
                self.enterOuterAlt(localctx, 78)
                self.state = 272
                self.match(CobolPreprocessorParser.NOGRAPHIC)
                pass

            elif la_ == 79:
                self.enterOuterAlt(localctx, 79)
                self.state = 273
                self.match(CobolPreprocessorParser.NOLENGTH)
                pass

            elif la_ == 80:
                self.enterOuterAlt(localctx, 80)
                self.state = 274
                self.match(CobolPreprocessorParser.NOLIB)
                pass

            elif la_ == 81:
                self.enterOuterAlt(localctx, 81)
                self.state = 275
                self.match(CobolPreprocessorParser.NOLINKAGE)
                pass

            elif la_ == 82:
                self.enterOuterAlt(localctx, 82)
                self.state = 276
                self.match(CobolPreprocessorParser.NOLIST)
                pass

            elif la_ == 83:
                self.enterOuterAlt(localctx, 83)
                self.state = 277
                self.match(CobolPreprocessorParser.NOMAP)
                pass

            elif la_ == 84:
                self.enterOuterAlt(localctx, 84)
                self.state = 278
                _la = self._input.LA(1)
                if not(_la==151 or _la==152):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 85:
                self.enterOuterAlt(localctx, 85)
                self.state = 279
                self.match(CobolPreprocessorParser.NONAME)
                pass

            elif la_ == 86:
                self.enterOuterAlt(localctx, 86)
                self.state = 280
                _la = self._input.LA(1)
                if not(_la==154 or _la==155):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 87:
                self.enterOuterAlt(localctx, 87)
                self.state = 281
                _la = self._input.LA(1)
                if not(_la==156 or _la==157):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 88:
                self.enterOuterAlt(localctx, 88)
                self.state = 282
                _la = self._input.LA(1)
                if not(_la==158 or _la==159):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 89:
                self.enterOuterAlt(localctx, 89)
                self.state = 283
                self.match(CobolPreprocessorParser.NOOPSEQUENCE)
                pass

            elif la_ == 90:
                self.enterOuterAlt(localctx, 90)
                self.state = 284
                _la = self._input.LA(1)
                if not(_la==161 or _la==162):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 91:
                self.enterOuterAlt(localctx, 91)
                self.state = 285
                self.match(CobolPreprocessorParser.NOOPTIONS)
                pass

            elif la_ == 92:
                self.enterOuterAlt(localctx, 92)
                self.state = 286
                self.match(CobolPreprocessorParser.NOP)
                pass

            elif la_ == 93:
                self.enterOuterAlt(localctx, 93)
                self.state = 287
                self.match(CobolPreprocessorParser.NOPROLOG)
                pass

            elif la_ == 94:
                self.enterOuterAlt(localctx, 94)
                self.state = 288
                self.match(CobolPreprocessorParser.NORENT)
                pass

            elif la_ == 95:
                self.enterOuterAlt(localctx, 95)
                self.state = 289
                _la = self._input.LA(1)
                if not(_la==171 or _la==180):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 96:
                self.enterOuterAlt(localctx, 96)
                self.state = 290
                _la = self._input.LA(1)
                if not(_la==168 or _la==172):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 97:
                self.enterOuterAlt(localctx, 97)
                self.state = 291
                self.match(CobolPreprocessorParser.NOSPIE)
                pass

            elif la_ == 98:
                self.enterOuterAlt(localctx, 98)
                self.state = 292
                self.match(CobolPreprocessorParser.NOSQL)
                pass

            elif la_ == 99:
                self.enterOuterAlt(localctx, 99)
                self.state = 293
                _la = self._input.LA(1)
                if not(_la==175 or _la==176):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 100:
                self.enterOuterAlt(localctx, 100)
                self.state = 294
                _la = self._input.LA(1)
                if not(_la==177 or _la==178):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 101:
                self.enterOuterAlt(localctx, 101)
                self.state = 295
                self.match(CobolPreprocessorParser.NOSTDTRUNC)
                pass

            elif la_ == 102:
                self.enterOuterAlt(localctx, 102)
                self.state = 296
                _la = self._input.LA(1)
                if not(_la==181 or _la==182):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 103:
                self.enterOuterAlt(localctx, 103)
                self.state = 297
                self.match(CobolPreprocessorParser.NOTEST)
                pass

            elif la_ == 104:
                self.enterOuterAlt(localctx, 104)
                self.state = 298
                self.match(CobolPreprocessorParser.NOTHREAD)
                pass

            elif la_ == 105:
                self.enterOuterAlt(localctx, 105)
                self.state = 299
                self.match(CobolPreprocessorParser.NOVBREF)
                pass

            elif la_ == 106:
                self.enterOuterAlt(localctx, 106)
                self.state = 300
                _la = self._input.LA(1)
                if not(_la==187 or _la==188):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 107:
                self.enterOuterAlt(localctx, 107)
                self.state = 301
                self.match(CobolPreprocessorParser.NSEQ)
                pass

            elif la_ == 108:
                self.enterOuterAlt(localctx, 108)
                self.state = 302
                _la = self._input.LA(1)
                if not(_la==192 or _la==194):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 303
                self.match(CobolPreprocessorParser.LPARENCHAR)
                self.state = 304
                _la = self._input.LA(1)
                if not(_la==34 or _la==99 or _la==100):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 305
                self.match(CobolPreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 109:
                self.enterOuterAlt(localctx, 109)
                self.state = 306
                self.match(CobolPreprocessorParser.NOVBREF)
                pass

            elif la_ == 110:
                self.enterOuterAlt(localctx, 110)
                self.state = 307
                _la = self._input.LA(1)
                if not(_la==189 or _la==190):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 111:
                self.enterOuterAlt(localctx, 111)
                self.state = 308
                self.match(CobolPreprocessorParser.NOZWB)
                pass

            elif la_ == 112:
                self.enterOuterAlt(localctx, 112)
                self.state = 309
                _la = self._input.LA(1)
                if not(_la==195 or _la==196):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 113:
                self.enterOuterAlt(localctx, 113)
                self.state = 310
                self.match(CobolPreprocessorParser.NUMPROC)
                self.state = 311
                self.match(CobolPreprocessorParser.LPARENCHAR)
                self.state = 312
                _la = self._input.LA(1)
                if not(_la==96 or _la==165 or _la==213):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 313
                self.match(CobolPreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 114:
                self.enterOuterAlt(localctx, 114)
                self.state = 314
                _la = self._input.LA(1)
                if not(_la==198 or _la==199):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 115:
                self.enterOuterAlt(localctx, 115)
                self.state = 315
                _la = self._input.LA(1)
                if not(_la==201 or _la==202):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 116:
                self.enterOuterAlt(localctx, 116)
                self.state = 316
                self.match(CobolPreprocessorParser.OPMARGINS)
                self.state = 317
                self.match(CobolPreprocessorParser.LPARENCHAR)
                self.state = 318
                self.literal()
                self.state = 319
                self.match(CobolPreprocessorParser.COMMACHAR)
                self.state = 320
                self.literal()
                self.state = 323
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==283:
                    self.state = 321
                    self.match(CobolPreprocessorParser.COMMACHAR)
                    self.state = 322
                    self.literal()


                self.state = 325
                self.match(CobolPreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 117:
                self.enterOuterAlt(localctx, 117)
                self.state = 327
                self.match(CobolPreprocessorParser.OPSEQUENCE)
                self.state = 328
                self.match(CobolPreprocessorParser.LPARENCHAR)
                self.state = 329
                self.literal()
                self.state = 330
                self.match(CobolPreprocessorParser.COMMACHAR)
                self.state = 331
                self.literal()
                self.state = 332
                self.match(CobolPreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 118:
                self.enterOuterAlt(localctx, 118)
                self.state = 334
                _la = self._input.LA(1)
                if not(_la==207 or _la==209):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 338
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                if la_ == 1:
                    self.state = 335
                    self.match(CobolPreprocessorParser.LPARENCHAR)
                    self.state = 336
                    _la = self._input.LA(1)
                    if not(_la==65 or _la==245):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 337
                    self.match(CobolPreprocessorParser.RPARENCHAR)


                pass

            elif la_ == 119:
                self.enterOuterAlt(localctx, 119)
                self.state = 340
                self.match(CobolPreprocessorParser.OPTFILE)
                pass

            elif la_ == 120:
                self.enterOuterAlt(localctx, 120)
                self.state = 341
                self.match(CobolPreprocessorParser.OPTIONS)
                pass

            elif la_ == 121:
                self.enterOuterAlt(localctx, 121)
                self.state = 342
                self.match(CobolPreprocessorParser.OP)
                pass

            elif la_ == 122:
                self.enterOuterAlt(localctx, 122)
                self.state = 343
                _la = self._input.LA(1)
                if not(_la==211 or _la==212):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 344
                self.match(CobolPreprocessorParser.LPARENCHAR)
                self.state = 345
                self.cobolWord()
                self.state = 346
                self.match(CobolPreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 123:
                self.enterOuterAlt(localctx, 123)
                self.state = 348
                _la = self._input.LA(1)
                if not(_la==215 or _la==216):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 349
                self.match(CobolPreprocessorParser.LPARENCHAR)
                self.state = 350
                _la = self._input.LA(1)
                if not(_la==19 or _la==23 or (((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 2071) != 0 or (((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & 4456449) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 351
                self.match(CobolPreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 124:
                self.enterOuterAlt(localctx, 124)
                self.state = 352
                self.match(CobolPreprocessorParser.PROLOG)
                pass

            elif la_ == 125:
                self.enterOuterAlt(localctx, 125)
                self.state = 353
                _la = self._input.LA(1)
                if not(_la==219 or _la==277):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 126:
                self.enterOuterAlt(localctx, 126)
                self.state = 354
                self.match(CobolPreprocessorParser.RENT)
                pass

            elif la_ == 127:
                self.enterOuterAlt(localctx, 127)
                self.state = 355
                self.match(CobolPreprocessorParser.RMODE)
                self.state = 356
                self.match(CobolPreprocessorParser.LPARENCHAR)
                self.state = 360
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [5]:
                    self.state = 357
                    self.match(CobolPreprocessorParser.ANY)
                    pass
                elif token in [9]:
                    self.state = 358
                    self.match(CobolPreprocessorParser.AUTO)
                    pass
                elif token in [286, 287]:
                    self.state = 359
                    self.literal()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 362
                self.match(CobolPreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 128:
                self.enterOuterAlt(localctx, 128)
                self.state = 363
                _la = self._input.LA(1)
                if not(_la==227 or _la==228):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 370
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
                if la_ == 1:
                    self.state = 364
                    self.match(CobolPreprocessorParser.LPARENCHAR)
                    self.state = 365
                    self.literal()
                    self.state = 366
                    self.match(CobolPreprocessorParser.COMMACHAR)
                    self.state = 367
                    self.literal()
                    self.state = 368
                    self.match(CobolPreprocessorParser.RPARENCHAR)


                pass

            elif la_ == 129:
                self.enterOuterAlt(localctx, 129)
                self.state = 372
                _la = self._input.LA(1)
                if not(_la==230 or _la==248):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 373
                self.match(CobolPreprocessorParser.LPARENCHAR)
                self.state = 376
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [93]:
                    self.state = 374
                    self.match(CobolPreprocessorParser.MAX)
                    pass
                elif token in [286, 287]:
                    self.state = 375
                    self.literal()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 378
                self.match(CobolPreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 130:
                self.enterOuterAlt(localctx, 130)
                self.state = 379
                _la = self._input.LA(1)
                if not(_la==231 or _la==278):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 131:
                self.enterOuterAlt(localctx, 131)
                self.state = 380
                self.match(CobolPreprocessorParser.SP)
                pass

            elif la_ == 132:
                self.enterOuterAlt(localctx, 132)
                self.state = 381
                self.match(CobolPreprocessorParser.SPACE)
                self.state = 382
                self.match(CobolPreprocessorParser.LPARENCHAR)
                self.state = 383
                self.literal()
                self.state = 384
                self.match(CobolPreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 133:
                self.enterOuterAlt(localctx, 133)
                self.state = 386
                self.match(CobolPreprocessorParser.SPIE)
                pass

            elif la_ == 134:
                self.enterOuterAlt(localctx, 134)
                self.state = 387
                self.match(CobolPreprocessorParser.SQL)
                self.state = 392
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
                if la_ == 1:
                    self.state = 388
                    self.match(CobolPreprocessorParser.LPARENCHAR)
                    self.state = 389
                    self.literal()
                    self.state = 390
                    self.match(CobolPreprocessorParser.RPARENCHAR)


                pass

            elif la_ == 135:
                self.enterOuterAlt(localctx, 135)
                self.state = 394
                _la = self._input.LA(1)
                if not(_la==236 or _la==237):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 136:
                self.enterOuterAlt(localctx, 136)
                self.state = 395
                _la = self._input.LA(1)
                if not(_la==243 or _la==244):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 137:
                self.enterOuterAlt(localctx, 137)
                self.state = 396
                self.match(CobolPreprocessorParser.SYSEIB)
                pass

            elif la_ == 138:
                self.enterOuterAlt(localctx, 138)
                self.state = 397
                _la = self._input.LA(1)
                if not(_la==249 or _la==250):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 139:
                self.enterOuterAlt(localctx, 139)
                self.state = 398
                self.match(CobolPreprocessorParser.TEST)
                self.state = 416
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 399
                    self.match(CobolPreprocessorParser.LPARENCHAR)
                    self.state = 401
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==68 or _la==145:
                        self.state = 400
                        _la = self._input.LA(1)
                        if not(_la==68 or _la==145):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 404
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                    if la_ == 1:
                        self.state = 403
                        self.match(CobolPreprocessorParser.COMMACHAR)


                    self.state = 407
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la - 169)) & ~0x3f) == 0 and ((1 << (_la - 169)) & 216172782113783811) != 0:
                        self.state = 406
                        _la = self._input.LA(1)
                        if not((((_la - 169)) & ~0x3f) == 0 and ((1 << (_la - 169)) & 216172782113783811) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 410
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==283:
                        self.state = 409
                        self.match(CobolPreprocessorParser.COMMACHAR)


                    self.state = 413
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==49 or _la==132:
                        self.state = 412
                        _la = self._input.LA(1)
                        if not(_la==49 or _la==132):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 415
                    self.match(CobolPreprocessorParser.RPARENCHAR)


                pass

            elif la_ == 140:
                self.enterOuterAlt(localctx, 140)
                self.state = 418
                self.match(CobolPreprocessorParser.THREAD)
                pass

            elif la_ == 141:
                self.enterOuterAlt(localctx, 141)
                self.state = 419
                self.match(CobolPreprocessorParser.TRUNC)
                self.state = 420
                self.match(CobolPreprocessorParser.LPARENCHAR)
                self.state = 421
                _la = self._input.LA(1)
                if not(_la==11 or _la==207 or _la==245):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 422
                self.match(CobolPreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 142:
                self.enterOuterAlt(localctx, 142)
                self.state = 423
                self.match(CobolPreprocessorParser.VBREF)
                pass

            elif la_ == 143:
                self.enterOuterAlt(localctx, 143)
                self.state = 424
                _la = self._input.LA(1)
                if not(_la==259 or _la==260):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 425
                self.match(CobolPreprocessorParser.LPARENCHAR)
                self.state = 426
                self.cobolWord()
                self.state = 427
                self.match(CobolPreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 144:
                self.enterOuterAlt(localctx, 144)
                self.state = 429
                _la = self._input.LA(1)
                if not(_la==261 or _la==264):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 430
                self.match(CobolPreprocessorParser.LPARENCHAR)
                self.state = 431
                _la = self._input.LA(1)
                if not(_la==23 or (((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & 524417) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 432
                self.match(CobolPreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 145:
                self.enterOuterAlt(localctx, 145)
                self.state = 433
                _la = self._input.LA(1)
                if not(_la==265 or _la==281):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 439
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                if la_ == 1:
                    self.state = 434
                    self.match(CobolPreprocessorParser.LPARENCHAR)
                    self.state = 436
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==65 or _la==229:
                        self.state = 435
                        _la = self._input.LA(1)
                        if not(_la==65 or _la==229):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 438
                    self.match(CobolPreprocessorParser.RPARENCHAR)


                pass

            elif la_ == 146:
                self.enterOuterAlt(localctx, 146)
                self.state = 441
                _la = self._input.LA(1)
                if not(_la==266 or _la==267):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 442
                self.match(CobolPreprocessorParser.LPARENCHAR)
                self.state = 443
                self.literal()
                self.state = 444
                self.match(CobolPreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 147:
                self.enterOuterAlt(localctx, 147)
                self.state = 446
                self.match(CobolPreprocessorParser.ZWB)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecCicsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXEC(self):
            return self.getToken(CobolPreprocessorParser.EXEC, 0)

        def CICS(self):
            return self.getToken(CobolPreprocessorParser.CICS, 0)

        def charData(self):
            return self.getTypedRuleContext(CobolPreprocessorParser.CharDataContext,0)


        def END_EXEC(self):
            return self.getToken(CobolPreprocessorParser.END_EXEC, 0)

        def DOT(self):
            return self.getToken(CobolPreprocessorParser.DOT, 0)

        def getRuleIndex(self):
            return CobolPreprocessorParser.RULE_execCicsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecCicsStatement" ):
                listener.enterExecCicsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecCicsStatement" ):
                listener.exitExecCicsStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecCicsStatement" ):
                return visitor.visitExecCicsStatement(self)
            else:
                return visitor.visitChildren(self)




    def execCicsStatement(self):

        localctx = CobolPreprocessorParser.ExecCicsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_execCicsStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            self.match(CobolPreprocessorParser.EXEC)
            self.state = 450
            self.match(CobolPreprocessorParser.CICS)
            self.state = 451
            self.charData()
            self.state = 452
            self.match(CobolPreprocessorParser.END_EXEC)
            self.state = 454
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 453
                self.match(CobolPreprocessorParser.DOT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecSqlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXEC(self):
            return self.getToken(CobolPreprocessorParser.EXEC, 0)

        def SQL(self):
            return self.getToken(CobolPreprocessorParser.SQL, 0)

        def END_EXEC(self):
            return self.getToken(CobolPreprocessorParser.END_EXEC, 0)

        def includeSource(self):
            return self.getTypedRuleContext(CobolPreprocessorParser.IncludeSourceContext,0)


        def charDataSql(self):
            return self.getTypedRuleContext(CobolPreprocessorParser.CharDataSqlContext,0)


        def DOT(self):
            return self.getToken(CobolPreprocessorParser.DOT, 0)

        def getRuleIndex(self):
            return CobolPreprocessorParser.RULE_execSqlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecSqlStatement" ):
                listener.enterExecSqlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecSqlStatement" ):
                listener.exitExecSqlStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecSqlStatement" ):
                return visitor.visitExecSqlStatement(self)
            else:
                return visitor.visitChildren(self)




    def execSqlStatement(self):

        localctx = CobolPreprocessorParser.ExecSqlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_execSqlStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            self.match(CobolPreprocessorParser.EXEC)
            self.state = 457
            self.match(CobolPreprocessorParser.SQL)
            self.state = 460
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [70]:
                self.state = 458
                self.includeSource()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 286, 287, 288, 289, 290, 293]:
                self.state = 459
                self.charDataSql()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 462
            self.match(CobolPreprocessorParser.END_EXEC)
            self.state = 464
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 463
                self.match(CobolPreprocessorParser.DOT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecSqlImsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXEC(self):
            return self.getToken(CobolPreprocessorParser.EXEC, 0)

        def SQLIMS(self):
            return self.getToken(CobolPreprocessorParser.SQLIMS, 0)

        def charData(self):
            return self.getTypedRuleContext(CobolPreprocessorParser.CharDataContext,0)


        def END_EXEC(self):
            return self.getToken(CobolPreprocessorParser.END_EXEC, 0)

        def DOT(self):
            return self.getToken(CobolPreprocessorParser.DOT, 0)

        def getRuleIndex(self):
            return CobolPreprocessorParser.RULE_execSqlImsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecSqlImsStatement" ):
                listener.enterExecSqlImsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecSqlImsStatement" ):
                listener.exitExecSqlImsStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecSqlImsStatement" ):
                return visitor.visitExecSqlImsStatement(self)
            else:
                return visitor.visitChildren(self)




    def execSqlImsStatement(self):

        localctx = CobolPreprocessorParser.ExecSqlImsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_execSqlImsStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self.match(CobolPreprocessorParser.EXEC)
            self.state = 467
            self.match(CobolPreprocessorParser.SQLIMS)
            self.state = 468
            self.charData()
            self.state = 469
            self.match(CobolPreprocessorParser.END_EXEC)
            self.state = 471
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.state = 470
                self.match(CobolPreprocessorParser.DOT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncludeSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCLUDE(self):
            return self.getToken(CobolPreprocessorParser.INCLUDE, 0)

        def copySource(self):
            return self.getTypedRuleContext(CobolPreprocessorParser.CopySourceContext,0)


        def getRuleIndex(self):
            return CobolPreprocessorParser.RULE_includeSource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncludeSource" ):
                listener.enterIncludeSource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncludeSource" ):
                listener.exitIncludeSource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncludeSource" ):
                return visitor.visitIncludeSource(self)
            else:
                return visitor.visitChildren(self)




    def includeSource(self):

        localctx = CobolPreprocessorParser.IncludeSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_includeSource)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473
            self.match(CobolPreprocessorParser.INCLUDE)
            self.state = 474
            self.copySource()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CopyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COPY(self):
            return self.getToken(CobolPreprocessorParser.COPY, 0)

        def copySource(self):
            return self.getTypedRuleContext(CobolPreprocessorParser.CopySourceContext,0)


        def DOT(self):
            return self.getToken(CobolPreprocessorParser.DOT, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(CobolPreprocessorParser.NEWLINE)
            else:
                return self.getToken(CobolPreprocessorParser.NEWLINE, i)

        def directoryPhrase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CobolPreprocessorParser.DirectoryPhraseContext)
            else:
                return self.getTypedRuleContext(CobolPreprocessorParser.DirectoryPhraseContext,i)


        def familyPhrase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CobolPreprocessorParser.FamilyPhraseContext)
            else:
                return self.getTypedRuleContext(CobolPreprocessorParser.FamilyPhraseContext,i)


        def replacingPhrase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CobolPreprocessorParser.ReplacingPhraseContext)
            else:
                return self.getTypedRuleContext(CobolPreprocessorParser.ReplacingPhraseContext,i)


        def SUPPRESS(self, i:int=None):
            if i is None:
                return self.getTokens(CobolPreprocessorParser.SUPPRESS)
            else:
                return self.getToken(CobolPreprocessorParser.SUPPRESS, i)

        def getRuleIndex(self):
            return CobolPreprocessorParser.RULE_copyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopyStatement" ):
                listener.enterCopyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopyStatement" ):
                listener.exitCopyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCopyStatement" ):
                return visitor.visitCopyStatement(self)
            else:
                return visitor.visitChildren(self)




    def copyStatement(self):

        localctx = CobolPreprocessorParser.CopyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_copyStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 476
            self.match(CobolPreprocessorParser.COPY)
            self.state = 477
            self.copySource()
            self.state = 492
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,39,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 481
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==290:
                        self.state = 478
                        self.match(CobolPreprocessorParser.NEWLINE)
                        self.state = 483
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 488
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [69, 200]:
                        self.state = 484
                        self.directoryPhrase()
                        pass
                    elif token in [203]:
                        self.state = 485
                        self.familyPhrase()
                        pass
                    elif token in [222]:
                        self.state = 486
                        self.replacingPhrase()
                        pass
                    elif token in [246]:
                        self.state = 487
                        self.match(CobolPreprocessorParser.SUPPRESS)
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 494
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

            self.state = 498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==290:
                self.state = 495
                self.match(CobolPreprocessorParser.NEWLINE)
                self.state = 500
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 501
            self.match(CobolPreprocessorParser.DOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CopySourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(CobolPreprocessorParser.LiteralContext,0)


        def cobolWord(self):
            return self.getTypedRuleContext(CobolPreprocessorParser.CobolWordContext,0)


        def filename(self):
            return self.getTypedRuleContext(CobolPreprocessorParser.FilenameContext,0)


        def copyLibrary(self):
            return self.getTypedRuleContext(CobolPreprocessorParser.CopyLibraryContext,0)


        def OF(self):
            return self.getToken(CobolPreprocessorParser.OF, 0)

        def IN(self):
            return self.getToken(CobolPreprocessorParser.IN, 0)

        def getRuleIndex(self):
            return CobolPreprocessorParser.RULE_copySource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopySource" ):
                listener.enterCopySource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopySource" ):
                listener.exitCopySource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCopySource" ):
                return visitor.visitCopySource(self)
            else:
                return visitor.visitChildren(self)




    def copySource(self):

        localctx = CobolPreprocessorParser.CopySourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_copySource)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 506
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [286, 287]:
                self.state = 503
                self.literal()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 288]:
                self.state = 504
                self.cobolWord()
                pass
            elif token in [289]:
                self.state = 505
                self.filename()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 510
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.state = 508
                _la = self._input.LA(1)
                if not(_la==69 or _la==200):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 509
                self.copyLibrary()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CopyLibraryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(CobolPreprocessorParser.LiteralContext,0)


        def cobolWord(self):
            return self.getTypedRuleContext(CobolPreprocessorParser.CobolWordContext,0)


        def getRuleIndex(self):
            return CobolPreprocessorParser.RULE_copyLibrary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopyLibrary" ):
                listener.enterCopyLibrary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopyLibrary" ):
                listener.exitCopyLibrary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCopyLibrary" ):
                return visitor.visitCopyLibrary(self)
            else:
                return visitor.visitChildren(self)




    def copyLibrary(self):

        localctx = CobolPreprocessorParser.CopyLibraryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_copyLibrary)
        try:
            self.state = 514
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [286, 287]:
                self.enterOuterAlt(localctx, 1)
                self.state = 512
                self.literal()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 288]:
                self.enterOuterAlt(localctx, 2)
                self.state = 513
                self.cobolWord()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplacingPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACING(self):
            return self.getToken(CobolPreprocessorParser.REPLACING, 0)

        def replaceClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CobolPreprocessorParser.ReplaceClauseContext)
            else:
                return self.getTypedRuleContext(CobolPreprocessorParser.ReplaceClauseContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(CobolPreprocessorParser.NEWLINE)
            else:
                return self.getToken(CobolPreprocessorParser.NEWLINE, i)

        def getRuleIndex(self):
            return CobolPreprocessorParser.RULE_replacingPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplacingPhrase" ):
                listener.enterReplacingPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplacingPhrase" ):
                listener.exitReplacingPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplacingPhrase" ):
                return visitor.visitReplacingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def replacingPhrase(self):

        localctx = CobolPreprocessorParser.ReplacingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_replacingPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self.match(CobolPreprocessorParser.REPLACING)
            self.state = 520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==290:
                self.state = 517
                self.match(CobolPreprocessorParser.NEWLINE)
                self.state = 522
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 523
            self.replaceClause()
            self.state = 532
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 525 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 524
                        self.match(CobolPreprocessorParser.NEWLINE)
                        self.state = 527 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==290):
                            break

                    self.state = 529
                    self.replaceClause() 
                self.state = 534
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceAreaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def replaceByStatement(self):
            return self.getTypedRuleContext(CobolPreprocessorParser.ReplaceByStatementContext,0)


        def copyStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CobolPreprocessorParser.CopyStatementContext)
            else:
                return self.getTypedRuleContext(CobolPreprocessorParser.CopyStatementContext,i)


        def charData(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CobolPreprocessorParser.CharDataContext)
            else:
                return self.getTypedRuleContext(CobolPreprocessorParser.CharDataContext,i)


        def replaceOffStatement(self):
            return self.getTypedRuleContext(CobolPreprocessorParser.ReplaceOffStatementContext,0)


        def getRuleIndex(self):
            return CobolPreprocessorParser.RULE_replaceArea

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceArea" ):
                listener.enterReplaceArea(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceArea" ):
                listener.exitReplaceArea(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplaceArea" ):
                return visitor.visitReplaceArea(self)
            else:
                return visitor.visitChildren(self)




    def replaceArea(self):

        localctx = CobolPreprocessorParser.ReplaceAreaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_replaceArea)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 535
            self.replaceByStatement()
            self.state = 540
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 538
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [25]:
                        self.state = 536
                        self.copyStatement()
                        pass
                    elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 286, 287, 288, 289, 290, 293]:
                        self.state = 537
                        self.charData()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 542
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

            self.state = 544
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 543
                self.replaceOffStatement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceByStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACE(self):
            return self.getToken(CobolPreprocessorParser.REPLACE, 0)

        def DOT(self):
            return self.getToken(CobolPreprocessorParser.DOT, 0)

        def replaceClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CobolPreprocessorParser.ReplaceClauseContext)
            else:
                return self.getTypedRuleContext(CobolPreprocessorParser.ReplaceClauseContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(CobolPreprocessorParser.NEWLINE)
            else:
                return self.getToken(CobolPreprocessorParser.NEWLINE, i)

        def getRuleIndex(self):
            return CobolPreprocessorParser.RULE_replaceByStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceByStatement" ):
                listener.enterReplaceByStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceByStatement" ):
                listener.exitReplaceByStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplaceByStatement" ):
                return visitor.visitReplaceByStatement(self)
            else:
                return visitor.visitChildren(self)




    def replaceByStatement(self):

        localctx = CobolPreprocessorParser.ReplaceByStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_replaceByStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 546
            self.match(CobolPreprocessorParser.REPLACE)
            self.state = 554 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 550
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==290:
                        self.state = 547
                        self.match(CobolPreprocessorParser.NEWLINE)
                        self.state = 552
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 553
                    self.replaceClause()

                else:
                    raise NoViableAltException(self)
                self.state = 556 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

            self.state = 558
            self.match(CobolPreprocessorParser.DOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceOffStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACE(self):
            return self.getToken(CobolPreprocessorParser.REPLACE, 0)

        def OFF(self):
            return self.getToken(CobolPreprocessorParser.OFF, 0)

        def DOT(self):
            return self.getToken(CobolPreprocessorParser.DOT, 0)

        def getRuleIndex(self):
            return CobolPreprocessorParser.RULE_replaceOffStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceOffStatement" ):
                listener.enterReplaceOffStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceOffStatement" ):
                listener.exitReplaceOffStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplaceOffStatement" ):
                return visitor.visitReplaceOffStatement(self)
            else:
                return visitor.visitChildren(self)




    def replaceOffStatement(self):

        localctx = CobolPreprocessorParser.ReplaceOffStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_replaceOffStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 560
            self.match(CobolPreprocessorParser.REPLACE)
            self.state = 561
            self.match(CobolPreprocessorParser.OFF)
            self.state = 562
            self.match(CobolPreprocessorParser.DOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def replaceable(self):
            return self.getTypedRuleContext(CobolPreprocessorParser.ReplaceableContext,0)


        def BY(self):
            return self.getToken(CobolPreprocessorParser.BY, 0)

        def replacement(self):
            return self.getTypedRuleContext(CobolPreprocessorParser.ReplacementContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(CobolPreprocessorParser.NEWLINE)
            else:
                return self.getToken(CobolPreprocessorParser.NEWLINE, i)

        def directoryPhrase(self):
            return self.getTypedRuleContext(CobolPreprocessorParser.DirectoryPhraseContext,0)


        def familyPhrase(self):
            return self.getTypedRuleContext(CobolPreprocessorParser.FamilyPhraseContext,0)


        def getRuleIndex(self):
            return CobolPreprocessorParser.RULE_replaceClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceClause" ):
                listener.enterReplaceClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceClause" ):
                listener.exitReplaceClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplaceClause" ):
                return visitor.visitReplaceClause(self)
            else:
                return visitor.visitChildren(self)




    def replaceClause(self):

        localctx = CobolPreprocessorParser.ReplaceClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_replaceClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.replaceable()
            self.state = 568
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==290:
                self.state = 565
                self.match(CobolPreprocessorParser.NEWLINE)
                self.state = 570
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 571
            self.match(CobolPreprocessorParser.BY)
            self.state = 575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==290:
                self.state = 572
                self.match(CobolPreprocessorParser.NEWLINE)
                self.state = 577
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 578
            self.replacement()
            self.state = 586
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.state = 582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==290:
                    self.state = 579
                    self.match(CobolPreprocessorParser.NEWLINE)
                    self.state = 584
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 585
                self.directoryPhrase()


            self.state = 595
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 591
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==290:
                    self.state = 588
                    self.match(CobolPreprocessorParser.NEWLINE)
                    self.state = 593
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 594
                self.familyPhrase()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectoryPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(CobolPreprocessorParser.OF, 0)

        def IN(self):
            return self.getToken(CobolPreprocessorParser.IN, 0)

        def literal(self):
            return self.getTypedRuleContext(CobolPreprocessorParser.LiteralContext,0)


        def cobolWord(self):
            return self.getTypedRuleContext(CobolPreprocessorParser.CobolWordContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(CobolPreprocessorParser.NEWLINE)
            else:
                return self.getToken(CobolPreprocessorParser.NEWLINE, i)

        def getRuleIndex(self):
            return CobolPreprocessorParser.RULE_directoryPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectoryPhrase" ):
                listener.enterDirectoryPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectoryPhrase" ):
                listener.exitDirectoryPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDirectoryPhrase" ):
                return visitor.visitDirectoryPhrase(self)
            else:
                return visitor.visitChildren(self)




    def directoryPhrase(self):

        localctx = CobolPreprocessorParser.DirectoryPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_directoryPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 597
            _la = self._input.LA(1)
            if not(_la==69 or _la==200):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==290:
                self.state = 598
                self.match(CobolPreprocessorParser.NEWLINE)
                self.state = 603
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 606
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [286, 287]:
                self.state = 604
                self.literal()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 288]:
                self.state = 605
                self.cobolWord()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FamilyPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(CobolPreprocessorParser.ON, 0)

        def literal(self):
            return self.getTypedRuleContext(CobolPreprocessorParser.LiteralContext,0)


        def cobolWord(self):
            return self.getTypedRuleContext(CobolPreprocessorParser.CobolWordContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(CobolPreprocessorParser.NEWLINE)
            else:
                return self.getToken(CobolPreprocessorParser.NEWLINE, i)

        def getRuleIndex(self):
            return CobolPreprocessorParser.RULE_familyPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFamilyPhrase" ):
                listener.enterFamilyPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFamilyPhrase" ):
                listener.exitFamilyPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFamilyPhrase" ):
                return visitor.visitFamilyPhrase(self)
            else:
                return visitor.visitChildren(self)




    def familyPhrase(self):

        localctx = CobolPreprocessorParser.FamilyPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_familyPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.match(CobolPreprocessorParser.ON)
            self.state = 612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==290:
                self.state = 609
                self.match(CobolPreprocessorParser.NEWLINE)
                self.state = 614
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 617
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [286, 287]:
                self.state = 615
                self.literal()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 288]:
                self.state = 616
                self.cobolWord()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(CobolPreprocessorParser.LiteralContext,0)


        def cobolWord(self):
            return self.getTypedRuleContext(CobolPreprocessorParser.CobolWordContext,0)


        def pseudoText(self):
            return self.getTypedRuleContext(CobolPreprocessorParser.PseudoTextContext,0)


        def charDataLine(self):
            return self.getTypedRuleContext(CobolPreprocessorParser.CharDataLineContext,0)


        def getRuleIndex(self):
            return CobolPreprocessorParser.RULE_replaceable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceable" ):
                listener.enterReplaceable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceable" ):
                listener.exitReplaceable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplaceable" ):
                return visitor.visitReplaceable(self)
            else:
                return visitor.visitChildren(self)




    def replaceable(self):

        localctx = CobolPreprocessorParser.ReplaceableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_replaceable)
        try:
            self.state = 623
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 619
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 620
                self.cobolWord()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 621
                self.pseudoText()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 622
                self.charDataLine()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplacementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(CobolPreprocessorParser.LiteralContext,0)


        def cobolWord(self):
            return self.getTypedRuleContext(CobolPreprocessorParser.CobolWordContext,0)


        def pseudoText(self):
            return self.getTypedRuleContext(CobolPreprocessorParser.PseudoTextContext,0)


        def charDataLine(self):
            return self.getTypedRuleContext(CobolPreprocessorParser.CharDataLineContext,0)


        def getRuleIndex(self):
            return CobolPreprocessorParser.RULE_replacement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplacement" ):
                listener.enterReplacement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplacement" ):
                listener.exitReplacement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplacement" ):
                return visitor.visitReplacement(self)
            else:
                return visitor.visitChildren(self)




    def replacement(self):

        localctx = CobolPreprocessorParser.ReplacementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_replacement)
        try:
            self.state = 629
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 625
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 626
                self.cobolWord()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 627
                self.pseudoText()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 628
                self.charDataLine()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EjectStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EJECT(self):
            return self.getToken(CobolPreprocessorParser.EJECT, 0)

        def DOT(self):
            return self.getToken(CobolPreprocessorParser.DOT, 0)

        def getRuleIndex(self):
            return CobolPreprocessorParser.RULE_ejectStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEjectStatement" ):
                listener.enterEjectStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEjectStatement" ):
                listener.exitEjectStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEjectStatement" ):
                return visitor.visitEjectStatement(self)
            else:
                return visitor.visitChildren(self)




    def ejectStatement(self):

        localctx = CobolPreprocessorParser.EjectStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_ejectStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self.match(CobolPreprocessorParser.EJECT)
            self.state = 633
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 632
                self.match(CobolPreprocessorParser.DOT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkipStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SKIP1(self):
            return self.getToken(CobolPreprocessorParser.SKIP1, 0)

        def SKIP2(self):
            return self.getToken(CobolPreprocessorParser.SKIP2, 0)

        def SKIP3(self):
            return self.getToken(CobolPreprocessorParser.SKIP3, 0)

        def DOT(self):
            return self.getToken(CobolPreprocessorParser.DOT, 0)

        def getRuleIndex(self):
            return CobolPreprocessorParser.RULE_skipStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkipStatement" ):
                listener.enterSkipStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkipStatement" ):
                listener.exitSkipStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSkipStatement" ):
                return visitor.visitSkipStatement(self)
            else:
                return visitor.visitChildren(self)




    def skipStatement(self):

        localctx = CobolPreprocessorParser.SkipStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_skipStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 635
            _la = self._input.LA(1)
            if not((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & 7) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 637
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 636
                self.match(CobolPreprocessorParser.DOT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TitleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TITLE(self):
            return self.getToken(CobolPreprocessorParser.TITLE, 0)

        def literal(self):
            return self.getTypedRuleContext(CobolPreprocessorParser.LiteralContext,0)


        def DOT(self):
            return self.getToken(CobolPreprocessorParser.DOT, 0)

        def getRuleIndex(self):
            return CobolPreprocessorParser.RULE_titleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTitleStatement" ):
                listener.enterTitleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTitleStatement" ):
                listener.exitTitleStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTitleStatement" ):
                return visitor.visitTitleStatement(self)
            else:
                return visitor.visitChildren(self)




    def titleStatement(self):

        localctx = CobolPreprocessorParser.TitleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_titleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            self.match(CobolPreprocessorParser.TITLE)
            self.state = 640
            self.literal()
            self.state = 642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 641
                self.match(CobolPreprocessorParser.DOT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PseudoTextContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLEEQUALCHAR(self, i:int=None):
            if i is None:
                return self.getTokens(CobolPreprocessorParser.DOUBLEEQUALCHAR)
            else:
                return self.getToken(CobolPreprocessorParser.DOUBLEEQUALCHAR, i)

        def charData(self):
            return self.getTypedRuleContext(CobolPreprocessorParser.CharDataContext,0)


        def getRuleIndex(self):
            return CobolPreprocessorParser.RULE_pseudoText

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPseudoText" ):
                listener.enterPseudoText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPseudoText" ):
                listener.exitPseudoText(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPseudoText" ):
                return visitor.visitPseudoText(self)
            else:
                return visitor.visitChildren(self)




    def pseudoText(self):

        localctx = CobolPreprocessorParser.PseudoTextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_pseudoText)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self.match(CobolPreprocessorParser.DOUBLEEQUALCHAR)
            self.state = 646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & -2346375405893844994) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -16449) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -576460752303423489) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -19069930209017857) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 171194711791) != 0:
                self.state = 645
                self.charData()


            self.state = 648
            self.match(CobolPreprocessorParser.DOUBLEEQUALCHAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharDataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def charDataLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CobolPreprocessorParser.CharDataLineContext)
            else:
                return self.getTypedRuleContext(CobolPreprocessorParser.CharDataLineContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(CobolPreprocessorParser.NEWLINE)
            else:
                return self.getToken(CobolPreprocessorParser.NEWLINE, i)

        def getRuleIndex(self):
            return CobolPreprocessorParser.RULE_charData

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharData" ):
                listener.enterCharData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharData" ):
                listener.exitCharData(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharData" ):
                return visitor.visitCharData(self)
            else:
                return visitor.visitChildren(self)




    def charData(self):

        localctx = CobolPreprocessorParser.CharDataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_charData)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 652
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 286, 287, 288, 289, 293]:
                        self.state = 650
                        self.charDataLine()
                        pass
                    elif token in [290]:
                        self.state = 651
                        self.match(CobolPreprocessorParser.NEWLINE)
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 654 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharDataSqlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def charDataLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CobolPreprocessorParser.CharDataLineContext)
            else:
                return self.getTypedRuleContext(CobolPreprocessorParser.CharDataLineContext,i)


        def COPY(self, i:int=None):
            if i is None:
                return self.getTokens(CobolPreprocessorParser.COPY)
            else:
                return self.getToken(CobolPreprocessorParser.COPY, i)

        def REPLACE(self, i:int=None):
            if i is None:
                return self.getTokens(CobolPreprocessorParser.REPLACE)
            else:
                return self.getToken(CobolPreprocessorParser.REPLACE, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(CobolPreprocessorParser.NEWLINE)
            else:
                return self.getToken(CobolPreprocessorParser.NEWLINE, i)

        def getRuleIndex(self):
            return CobolPreprocessorParser.RULE_charDataSql

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharDataSql" ):
                listener.enterCharDataSql(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharDataSql" ):
                listener.exitCharDataSql(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharDataSql" ):
                return visitor.visitCharDataSql(self)
            else:
                return visitor.visitChildren(self)




    def charDataSql(self):

        localctx = CobolPreprocessorParser.CharDataSqlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_charDataSql)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 660 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 660
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 286, 287, 288, 289, 293]:
                    self.state = 656
                    self.charDataLine()
                    pass
                elif token in [25]:
                    self.state = 657
                    self.match(CobolPreprocessorParser.COPY)
                    pass
                elif token in [221]:
                    self.state = 658
                    self.match(CobolPreprocessorParser.REPLACE)
                    pass
                elif token in [290]:
                    self.state = 659
                    self.match(CobolPreprocessorParser.NEWLINE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 662 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((_la) & ~0x3f) == 0 and ((1 << _la) & -2346375405860290562) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -16449) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -576460752303423489) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -19069929672146945) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 171194711791) != 0):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharDataLineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CobolPreprocessorParser.CobolWordContext)
            else:
                return self.getTypedRuleContext(CobolPreprocessorParser.CobolWordContext,i)


        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CobolPreprocessorParser.LiteralContext)
            else:
                return self.getTypedRuleContext(CobolPreprocessorParser.LiteralContext,i)


        def filename(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CobolPreprocessorParser.FilenameContext)
            else:
                return self.getTypedRuleContext(CobolPreprocessorParser.FilenameContext,i)


        def TEXT(self, i:int=None):
            if i is None:
                return self.getTokens(CobolPreprocessorParser.TEXT)
            else:
                return self.getToken(CobolPreprocessorParser.TEXT, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CobolPreprocessorParser.DOT)
            else:
                return self.getToken(CobolPreprocessorParser.DOT, i)

        def LPARENCHAR(self, i:int=None):
            if i is None:
                return self.getTokens(CobolPreprocessorParser.LPARENCHAR)
            else:
                return self.getToken(CobolPreprocessorParser.LPARENCHAR, i)

        def RPARENCHAR(self, i:int=None):
            if i is None:
                return self.getTokens(CobolPreprocessorParser.RPARENCHAR)
            else:
                return self.getToken(CobolPreprocessorParser.RPARENCHAR, i)

        def getRuleIndex(self):
            return CobolPreprocessorParser.RULE_charDataLine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharDataLine" ):
                listener.enterCharDataLine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharDataLine" ):
                listener.exitCharDataLine(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharDataLine" ):
                return visitor.visitCharDataLine(self)
            else:
                return visitor.visitChildren(self)




    def charDataLine(self):

        localctx = CobolPreprocessorParser.CharDataLineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_charDataLine)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 671
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 288]:
                        self.state = 664
                        self.cobolWord()
                        pass
                    elif token in [286, 287]:
                        self.state = 665
                        self.literal()
                        pass
                    elif token in [289]:
                        self.state = 666
                        self.filename()
                        pass
                    elif token in [293]:
                        self.state = 667
                        self.match(CobolPreprocessorParser.TEXT)
                        pass
                    elif token in [284]:
                        self.state = 668
                        self.match(CobolPreprocessorParser.DOT)
                        pass
                    elif token in [89]:
                        self.state = 669
                        self.match(CobolPreprocessorParser.LPARENCHAR)
                        pass
                    elif token in [224]:
                        self.state = 670
                        self.match(CobolPreprocessorParser.RPARENCHAR)
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 673 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CobolWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(CobolPreprocessorParser.IDENTIFIER, 0)

        def charDataKeyword(self):
            return self.getTypedRuleContext(CobolPreprocessorParser.CharDataKeywordContext,0)


        def getRuleIndex(self):
            return CobolPreprocessorParser.RULE_cobolWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCobolWord" ):
                listener.enterCobolWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCobolWord" ):
                listener.exitCobolWord(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCobolWord" ):
                return visitor.visitCobolWord(self)
            else:
                return visitor.visitChildren(self)




    def cobolWord(self):

        localctx = CobolPreprocessorParser.CobolWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_cobolWord)
        try:
            self.state = 677
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [288]:
                self.enterOuterAlt(localctx, 1)
                self.state = 675
                self.match(CobolPreprocessorParser.IDENTIFIER)
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283]:
                self.enterOuterAlt(localctx, 2)
                self.state = 676
                self.charDataKeyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONNUMERICLITERAL(self):
            return self.getToken(CobolPreprocessorParser.NONNUMERICLITERAL, 0)

        def NUMERICLITERAL(self):
            return self.getToken(CobolPreprocessorParser.NUMERICLITERAL, 0)

        def getRuleIndex(self):
            return CobolPreprocessorParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = CobolPreprocessorParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            _la = self._input.LA(1)
            if not(_la==286 or _la==287):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILENAME(self):
            return self.getToken(CobolPreprocessorParser.FILENAME, 0)

        def getRuleIndex(self):
            return CobolPreprocessorParser.RULE_filename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilename" ):
                listener.enterFilename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilename" ):
                listener.exitFilename(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFilename" ):
                return visitor.visitFilename(self)
            else:
                return visitor.visitChildren(self)




    def filename(self):

        localctx = CobolPreprocessorParser.FilenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_filename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self.match(CobolPreprocessorParser.FILENAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharDataKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADATA(self):
            return self.getToken(CobolPreprocessorParser.ADATA, 0)

        def ADV(self):
            return self.getToken(CobolPreprocessorParser.ADV, 0)

        def ALIAS(self):
            return self.getToken(CobolPreprocessorParser.ALIAS, 0)

        def ANSI(self):
            return self.getToken(CobolPreprocessorParser.ANSI, 0)

        def ANY(self):
            return self.getToken(CobolPreprocessorParser.ANY, 0)

        def APOST(self):
            return self.getToken(CobolPreprocessorParser.APOST, 0)

        def AR(self):
            return self.getToken(CobolPreprocessorParser.AR, 0)

        def ARITH(self):
            return self.getToken(CobolPreprocessorParser.ARITH, 0)

        def AUTO(self):
            return self.getToken(CobolPreprocessorParser.AUTO, 0)

        def AWO(self):
            return self.getToken(CobolPreprocessorParser.AWO, 0)

        def BIN(self):
            return self.getToken(CobolPreprocessorParser.BIN, 0)

        def BLOCK0(self):
            return self.getToken(CobolPreprocessorParser.BLOCK0, 0)

        def BUF(self):
            return self.getToken(CobolPreprocessorParser.BUF, 0)

        def BUFSIZE(self):
            return self.getToken(CobolPreprocessorParser.BUFSIZE, 0)

        def BY(self):
            return self.getToken(CobolPreprocessorParser.BY, 0)

        def CBL(self):
            return self.getToken(CobolPreprocessorParser.CBL, 0)

        def CBLCARD(self):
            return self.getToken(CobolPreprocessorParser.CBLCARD, 0)

        def CO(self):
            return self.getToken(CobolPreprocessorParser.CO, 0)

        def COBOL2(self):
            return self.getToken(CobolPreprocessorParser.COBOL2, 0)

        def COBOL3(self):
            return self.getToken(CobolPreprocessorParser.COBOL3, 0)

        def CODEPAGE(self):
            return self.getToken(CobolPreprocessorParser.CODEPAGE, 0)

        def COMMACHAR(self):
            return self.getToken(CobolPreprocessorParser.COMMACHAR, 0)

        def COMPAT(self):
            return self.getToken(CobolPreprocessorParser.COMPAT, 0)

        def COMPILE(self):
            return self.getToken(CobolPreprocessorParser.COMPILE, 0)

        def CP(self):
            return self.getToken(CobolPreprocessorParser.CP, 0)

        def CPP(self):
            return self.getToken(CobolPreprocessorParser.CPP, 0)

        def CPSM(self):
            return self.getToken(CobolPreprocessorParser.CPSM, 0)

        def CS(self):
            return self.getToken(CobolPreprocessorParser.CS, 0)

        def CURR(self):
            return self.getToken(CobolPreprocessorParser.CURR, 0)

        def CURRENCY(self):
            return self.getToken(CobolPreprocessorParser.CURRENCY, 0)

        def DATA(self):
            return self.getToken(CobolPreprocessorParser.DATA, 0)

        def DATEPROC(self):
            return self.getToken(CobolPreprocessorParser.DATEPROC, 0)

        def DBCS(self):
            return self.getToken(CobolPreprocessorParser.DBCS, 0)

        def DD(self):
            return self.getToken(CobolPreprocessorParser.DD, 0)

        def DEBUG(self):
            return self.getToken(CobolPreprocessorParser.DEBUG, 0)

        def DECK(self):
            return self.getToken(CobolPreprocessorParser.DECK, 0)

        def DIAGTRUNC(self):
            return self.getToken(CobolPreprocessorParser.DIAGTRUNC, 0)

        def DLI(self):
            return self.getToken(CobolPreprocessorParser.DLI, 0)

        def DLL(self):
            return self.getToken(CobolPreprocessorParser.DLL, 0)

        def DP(self):
            return self.getToken(CobolPreprocessorParser.DP, 0)

        def DTR(self):
            return self.getToken(CobolPreprocessorParser.DTR, 0)

        def DU(self):
            return self.getToken(CobolPreprocessorParser.DU, 0)

        def DUMP(self):
            return self.getToken(CobolPreprocessorParser.DUMP, 0)

        def DYN(self):
            return self.getToken(CobolPreprocessorParser.DYN, 0)

        def DYNAM(self):
            return self.getToken(CobolPreprocessorParser.DYNAM, 0)

        def EDF(self):
            return self.getToken(CobolPreprocessorParser.EDF, 0)

        def EJECT(self):
            return self.getToken(CobolPreprocessorParser.EJECT, 0)

        def EJPD(self):
            return self.getToken(CobolPreprocessorParser.EJPD, 0)

        def EN(self):
            return self.getToken(CobolPreprocessorParser.EN, 0)

        def ENGLISH(self):
            return self.getToken(CobolPreprocessorParser.ENGLISH, 0)

        def EPILOG(self):
            return self.getToken(CobolPreprocessorParser.EPILOG, 0)

        def EXCI(self):
            return self.getToken(CobolPreprocessorParser.EXCI, 0)

        def EXIT(self):
            return self.getToken(CobolPreprocessorParser.EXIT, 0)

        def EXP(self):
            return self.getToken(CobolPreprocessorParser.EXP, 0)

        def EXPORTALL(self):
            return self.getToken(CobolPreprocessorParser.EXPORTALL, 0)

        def EXTEND(self):
            return self.getToken(CobolPreprocessorParser.EXTEND, 0)

        def FASTSRT(self):
            return self.getToken(CobolPreprocessorParser.FASTSRT, 0)

        def FLAG(self):
            return self.getToken(CobolPreprocessorParser.FLAG, 0)

        def FLAGSTD(self):
            return self.getToken(CobolPreprocessorParser.FLAGSTD, 0)

        def FULL(self):
            return self.getToken(CobolPreprocessorParser.FULL, 0)

        def FSRT(self):
            return self.getToken(CobolPreprocessorParser.FSRT, 0)

        def GDS(self):
            return self.getToken(CobolPreprocessorParser.GDS, 0)

        def GRAPHIC(self):
            return self.getToken(CobolPreprocessorParser.GRAPHIC, 0)

        def HOOK(self):
            return self.getToken(CobolPreprocessorParser.HOOK, 0)

        def IN(self):
            return self.getToken(CobolPreprocessorParser.IN, 0)

        def INTDATE(self):
            return self.getToken(CobolPreprocessorParser.INTDATE, 0)

        def JA(self):
            return self.getToken(CobolPreprocessorParser.JA, 0)

        def JP(self):
            return self.getToken(CobolPreprocessorParser.JP, 0)

        def KA(self):
            return self.getToken(CobolPreprocessorParser.KA, 0)

        def LANG(self):
            return self.getToken(CobolPreprocessorParser.LANG, 0)

        def LANGUAGE(self):
            return self.getToken(CobolPreprocessorParser.LANGUAGE, 0)

        def LC(self):
            return self.getToken(CobolPreprocessorParser.LC, 0)

        def LENGTH(self):
            return self.getToken(CobolPreprocessorParser.LENGTH, 0)

        def LIB(self):
            return self.getToken(CobolPreprocessorParser.LIB, 0)

        def LILIAN(self):
            return self.getToken(CobolPreprocessorParser.LILIAN, 0)

        def LIN(self):
            return self.getToken(CobolPreprocessorParser.LIN, 0)

        def LINECOUNT(self):
            return self.getToken(CobolPreprocessorParser.LINECOUNT, 0)

        def LINKAGE(self):
            return self.getToken(CobolPreprocessorParser.LINKAGE, 0)

        def LIST(self):
            return self.getToken(CobolPreprocessorParser.LIST, 0)

        def LM(self):
            return self.getToken(CobolPreprocessorParser.LM, 0)

        def LONGMIXED(self):
            return self.getToken(CobolPreprocessorParser.LONGMIXED, 0)

        def LONGUPPER(self):
            return self.getToken(CobolPreprocessorParser.LONGUPPER, 0)

        def LU(self):
            return self.getToken(CobolPreprocessorParser.LU, 0)

        def MAP(self):
            return self.getToken(CobolPreprocessorParser.MAP, 0)

        def MARGINS(self):
            return self.getToken(CobolPreprocessorParser.MARGINS, 0)

        def MAX(self):
            return self.getToken(CobolPreprocessorParser.MAX, 0)

        def MD(self):
            return self.getToken(CobolPreprocessorParser.MD, 0)

        def MDECK(self):
            return self.getToken(CobolPreprocessorParser.MDECK, 0)

        def MIG(self):
            return self.getToken(CobolPreprocessorParser.MIG, 0)

        def MIXED(self):
            return self.getToken(CobolPreprocessorParser.MIXED, 0)

        def NAME(self):
            return self.getToken(CobolPreprocessorParser.NAME, 0)

        def NAT(self):
            return self.getToken(CobolPreprocessorParser.NAT, 0)

        def NATIONAL(self):
            return self.getToken(CobolPreprocessorParser.NATIONAL, 0)

        def NATLANG(self):
            return self.getToken(CobolPreprocessorParser.NATLANG, 0)

        def NN(self):
            return self.getToken(CobolPreprocessorParser.NN, 0)

        def NO(self):
            return self.getToken(CobolPreprocessorParser.NO, 0)

        def NOADATA(self):
            return self.getToken(CobolPreprocessorParser.NOADATA, 0)

        def NOADV(self):
            return self.getToken(CobolPreprocessorParser.NOADV, 0)

        def NOALIAS(self):
            return self.getToken(CobolPreprocessorParser.NOALIAS, 0)

        def NOAWO(self):
            return self.getToken(CobolPreprocessorParser.NOAWO, 0)

        def NOBLOCK0(self):
            return self.getToken(CobolPreprocessorParser.NOBLOCK0, 0)

        def NOC(self):
            return self.getToken(CobolPreprocessorParser.NOC, 0)

        def NOCBLCARD(self):
            return self.getToken(CobolPreprocessorParser.NOCBLCARD, 0)

        def NOCICS(self):
            return self.getToken(CobolPreprocessorParser.NOCICS, 0)

        def NOCMPR2(self):
            return self.getToken(CobolPreprocessorParser.NOCMPR2, 0)

        def NOCOMPILE(self):
            return self.getToken(CobolPreprocessorParser.NOCOMPILE, 0)

        def NOCPSM(self):
            return self.getToken(CobolPreprocessorParser.NOCPSM, 0)

        def NOCURR(self):
            return self.getToken(CobolPreprocessorParser.NOCURR, 0)

        def NOCURRENCY(self):
            return self.getToken(CobolPreprocessorParser.NOCURRENCY, 0)

        def NOD(self):
            return self.getToken(CobolPreprocessorParser.NOD, 0)

        def NODATEPROC(self):
            return self.getToken(CobolPreprocessorParser.NODATEPROC, 0)

        def NODBCS(self):
            return self.getToken(CobolPreprocessorParser.NODBCS, 0)

        def NODE(self):
            return self.getToken(CobolPreprocessorParser.NODE, 0)

        def NODEBUG(self):
            return self.getToken(CobolPreprocessorParser.NODEBUG, 0)

        def NODECK(self):
            return self.getToken(CobolPreprocessorParser.NODECK, 0)

        def NODIAGTRUNC(self):
            return self.getToken(CobolPreprocessorParser.NODIAGTRUNC, 0)

        def NODLL(self):
            return self.getToken(CobolPreprocessorParser.NODLL, 0)

        def NODU(self):
            return self.getToken(CobolPreprocessorParser.NODU, 0)

        def NODUMP(self):
            return self.getToken(CobolPreprocessorParser.NODUMP, 0)

        def NODP(self):
            return self.getToken(CobolPreprocessorParser.NODP, 0)

        def NODTR(self):
            return self.getToken(CobolPreprocessorParser.NODTR, 0)

        def NODYN(self):
            return self.getToken(CobolPreprocessorParser.NODYN, 0)

        def NODYNAM(self):
            return self.getToken(CobolPreprocessorParser.NODYNAM, 0)

        def NOEDF(self):
            return self.getToken(CobolPreprocessorParser.NOEDF, 0)

        def NOEJPD(self):
            return self.getToken(CobolPreprocessorParser.NOEJPD, 0)

        def NOEPILOG(self):
            return self.getToken(CobolPreprocessorParser.NOEPILOG, 0)

        def NOEXIT(self):
            return self.getToken(CobolPreprocessorParser.NOEXIT, 0)

        def NOEXP(self):
            return self.getToken(CobolPreprocessorParser.NOEXP, 0)

        def NOEXPORTALL(self):
            return self.getToken(CobolPreprocessorParser.NOEXPORTALL, 0)

        def NOF(self):
            return self.getToken(CobolPreprocessorParser.NOF, 0)

        def NOFASTSRT(self):
            return self.getToken(CobolPreprocessorParser.NOFASTSRT, 0)

        def NOFEPI(self):
            return self.getToken(CobolPreprocessorParser.NOFEPI, 0)

        def NOFLAG(self):
            return self.getToken(CobolPreprocessorParser.NOFLAG, 0)

        def NOFLAGMIG(self):
            return self.getToken(CobolPreprocessorParser.NOFLAGMIG, 0)

        def NOFLAGSTD(self):
            return self.getToken(CobolPreprocessorParser.NOFLAGSTD, 0)

        def NOFSRT(self):
            return self.getToken(CobolPreprocessorParser.NOFSRT, 0)

        def NOGRAPHIC(self):
            return self.getToken(CobolPreprocessorParser.NOGRAPHIC, 0)

        def NOHOOK(self):
            return self.getToken(CobolPreprocessorParser.NOHOOK, 0)

        def NOLENGTH(self):
            return self.getToken(CobolPreprocessorParser.NOLENGTH, 0)

        def NOLIB(self):
            return self.getToken(CobolPreprocessorParser.NOLIB, 0)

        def NOLINKAGE(self):
            return self.getToken(CobolPreprocessorParser.NOLINKAGE, 0)

        def NOLIST(self):
            return self.getToken(CobolPreprocessorParser.NOLIST, 0)

        def NOMAP(self):
            return self.getToken(CobolPreprocessorParser.NOMAP, 0)

        def NOMD(self):
            return self.getToken(CobolPreprocessorParser.NOMD, 0)

        def NOMDECK(self):
            return self.getToken(CobolPreprocessorParser.NOMDECK, 0)

        def NONAME(self):
            return self.getToken(CobolPreprocessorParser.NONAME, 0)

        def NONUM(self):
            return self.getToken(CobolPreprocessorParser.NONUM, 0)

        def NONUMBER(self):
            return self.getToken(CobolPreprocessorParser.NONUMBER, 0)

        def NOOBJ(self):
            return self.getToken(CobolPreprocessorParser.NOOBJ, 0)

        def NOOBJECT(self):
            return self.getToken(CobolPreprocessorParser.NOOBJECT, 0)

        def NOOFF(self):
            return self.getToken(CobolPreprocessorParser.NOOFF, 0)

        def NOOFFSET(self):
            return self.getToken(CobolPreprocessorParser.NOOFFSET, 0)

        def NOOPSEQUENCE(self):
            return self.getToken(CobolPreprocessorParser.NOOPSEQUENCE, 0)

        def NOOPT(self):
            return self.getToken(CobolPreprocessorParser.NOOPT, 0)

        def NOOPTIMIZE(self):
            return self.getToken(CobolPreprocessorParser.NOOPTIMIZE, 0)

        def NOOPTIONS(self):
            return self.getToken(CobolPreprocessorParser.NOOPTIONS, 0)

        def NOP(self):
            return self.getToken(CobolPreprocessorParser.NOP, 0)

        def NOPFD(self):
            return self.getToken(CobolPreprocessorParser.NOPFD, 0)

        def NOPROLOG(self):
            return self.getToken(CobolPreprocessorParser.NOPROLOG, 0)

        def NORENT(self):
            return self.getToken(CobolPreprocessorParser.NORENT, 0)

        def NOS(self):
            return self.getToken(CobolPreprocessorParser.NOS, 0)

        def NOSEP(self):
            return self.getToken(CobolPreprocessorParser.NOSEP, 0)

        def NOSEPARATE(self):
            return self.getToken(CobolPreprocessorParser.NOSEPARATE, 0)

        def NOSEQ(self):
            return self.getToken(CobolPreprocessorParser.NOSEQ, 0)

        def NOSEQUENCE(self):
            return self.getToken(CobolPreprocessorParser.NOSEQUENCE, 0)

        def NOSOURCE(self):
            return self.getToken(CobolPreprocessorParser.NOSOURCE, 0)

        def NOSPIE(self):
            return self.getToken(CobolPreprocessorParser.NOSPIE, 0)

        def NOSQL(self):
            return self.getToken(CobolPreprocessorParser.NOSQL, 0)

        def NOSQLC(self):
            return self.getToken(CobolPreprocessorParser.NOSQLC, 0)

        def NOSQLCCSID(self):
            return self.getToken(CobolPreprocessorParser.NOSQLCCSID, 0)

        def NOSSR(self):
            return self.getToken(CobolPreprocessorParser.NOSSR, 0)

        def NOSSRANGE(self):
            return self.getToken(CobolPreprocessorParser.NOSSRANGE, 0)

        def NOSTDTRUNC(self):
            return self.getToken(CobolPreprocessorParser.NOSTDTRUNC, 0)

        def NOTERM(self):
            return self.getToken(CobolPreprocessorParser.NOTERM, 0)

        def NOTERMINAL(self):
            return self.getToken(CobolPreprocessorParser.NOTERMINAL, 0)

        def NOTEST(self):
            return self.getToken(CobolPreprocessorParser.NOTEST, 0)

        def NOTHREAD(self):
            return self.getToken(CobolPreprocessorParser.NOTHREAD, 0)

        def NOTRIG(self):
            return self.getToken(CobolPreprocessorParser.NOTRIG, 0)

        def NOVBREF(self):
            return self.getToken(CobolPreprocessorParser.NOVBREF, 0)

        def NOWORD(self):
            return self.getToken(CobolPreprocessorParser.NOWORD, 0)

        def NOX(self):
            return self.getToken(CobolPreprocessorParser.NOX, 0)

        def NOXREF(self):
            return self.getToken(CobolPreprocessorParser.NOXREF, 0)

        def NOZWB(self):
            return self.getToken(CobolPreprocessorParser.NOZWB, 0)

        def NSEQ(self):
            return self.getToken(CobolPreprocessorParser.NSEQ, 0)

        def NSYMBOL(self):
            return self.getToken(CobolPreprocessorParser.NSYMBOL, 0)

        def NS(self):
            return self.getToken(CobolPreprocessorParser.NS, 0)

        def NUM(self):
            return self.getToken(CobolPreprocessorParser.NUM, 0)

        def NUMBER(self):
            return self.getToken(CobolPreprocessorParser.NUMBER, 0)

        def NUMPROC(self):
            return self.getToken(CobolPreprocessorParser.NUMPROC, 0)

        def OBJ(self):
            return self.getToken(CobolPreprocessorParser.OBJ, 0)

        def OBJECT(self):
            return self.getToken(CobolPreprocessorParser.OBJECT, 0)

        def ON(self):
            return self.getToken(CobolPreprocessorParser.ON, 0)

        def OF(self):
            return self.getToken(CobolPreprocessorParser.OF, 0)

        def OFF(self):
            return self.getToken(CobolPreprocessorParser.OFF, 0)

        def OFFSET(self):
            return self.getToken(CobolPreprocessorParser.OFFSET, 0)

        def OPMARGINS(self):
            return self.getToken(CobolPreprocessorParser.OPMARGINS, 0)

        def OPSEQUENCE(self):
            return self.getToken(CobolPreprocessorParser.OPSEQUENCE, 0)

        def OPTIMIZE(self):
            return self.getToken(CobolPreprocessorParser.OPTIMIZE, 0)

        def OP(self):
            return self.getToken(CobolPreprocessorParser.OP, 0)

        def OPT(self):
            return self.getToken(CobolPreprocessorParser.OPT, 0)

        def OPTFILE(self):
            return self.getToken(CobolPreprocessorParser.OPTFILE, 0)

        def OPTIONS(self):
            return self.getToken(CobolPreprocessorParser.OPTIONS, 0)

        def OUT(self):
            return self.getToken(CobolPreprocessorParser.OUT, 0)

        def OUTDD(self):
            return self.getToken(CobolPreprocessorParser.OUTDD, 0)

        def PFD(self):
            return self.getToken(CobolPreprocessorParser.PFD, 0)

        def PGMN(self):
            return self.getToken(CobolPreprocessorParser.PGMN, 0)

        def PGMNAME(self):
            return self.getToken(CobolPreprocessorParser.PGMNAME, 0)

        def PPTDBG(self):
            return self.getToken(CobolPreprocessorParser.PPTDBG, 0)

        def PROCESS(self):
            return self.getToken(CobolPreprocessorParser.PROCESS, 0)

        def PROLOG(self):
            return self.getToken(CobolPreprocessorParser.PROLOG, 0)

        def QUOTE(self):
            return self.getToken(CobolPreprocessorParser.QUOTE, 0)

        def RENT(self):
            return self.getToken(CobolPreprocessorParser.RENT, 0)

        def REPLACING(self):
            return self.getToken(CobolPreprocessorParser.REPLACING, 0)

        def RMODE(self):
            return self.getToken(CobolPreprocessorParser.RMODE, 0)

        def SEQ(self):
            return self.getToken(CobolPreprocessorParser.SEQ, 0)

        def SEQUENCE(self):
            return self.getToken(CobolPreprocessorParser.SEQUENCE, 0)

        def SEP(self):
            return self.getToken(CobolPreprocessorParser.SEP, 0)

        def SEPARATE(self):
            return self.getToken(CobolPreprocessorParser.SEPARATE, 0)

        def SHORT(self):
            return self.getToken(CobolPreprocessorParser.SHORT, 0)

        def SIZE(self):
            return self.getToken(CobolPreprocessorParser.SIZE, 0)

        def SOURCE(self):
            return self.getToken(CobolPreprocessorParser.SOURCE, 0)

        def SP(self):
            return self.getToken(CobolPreprocessorParser.SP, 0)

        def SPACE(self):
            return self.getToken(CobolPreprocessorParser.SPACE, 0)

        def SPIE(self):
            return self.getToken(CobolPreprocessorParser.SPIE, 0)

        def SQL(self):
            return self.getToken(CobolPreprocessorParser.SQL, 0)

        def SQLC(self):
            return self.getToken(CobolPreprocessorParser.SQLC, 0)

        def SQLCCSID(self):
            return self.getToken(CobolPreprocessorParser.SQLCCSID, 0)

        def SS(self):
            return self.getToken(CobolPreprocessorParser.SS, 0)

        def SSR(self):
            return self.getToken(CobolPreprocessorParser.SSR, 0)

        def SSRANGE(self):
            return self.getToken(CobolPreprocessorParser.SSRANGE, 0)

        def STD(self):
            return self.getToken(CobolPreprocessorParser.STD, 0)

        def SYSEIB(self):
            return self.getToken(CobolPreprocessorParser.SYSEIB, 0)

        def SZ(self):
            return self.getToken(CobolPreprocessorParser.SZ, 0)

        def TERM(self):
            return self.getToken(CobolPreprocessorParser.TERM, 0)

        def TERMINAL(self):
            return self.getToken(CobolPreprocessorParser.TERMINAL, 0)

        def TEST(self):
            return self.getToken(CobolPreprocessorParser.TEST, 0)

        def THREAD(self):
            return self.getToken(CobolPreprocessorParser.THREAD, 0)

        def TITLE(self):
            return self.getToken(CobolPreprocessorParser.TITLE, 0)

        def TRIG(self):
            return self.getToken(CobolPreprocessorParser.TRIG, 0)

        def TRUNC(self):
            return self.getToken(CobolPreprocessorParser.TRUNC, 0)

        def UE(self):
            return self.getToken(CobolPreprocessorParser.UE, 0)

        def UPPER(self):
            return self.getToken(CobolPreprocessorParser.UPPER, 0)

        def VBREF(self):
            return self.getToken(CobolPreprocessorParser.VBREF, 0)

        def WD(self):
            return self.getToken(CobolPreprocessorParser.WD, 0)

        def XMLPARSE(self):
            return self.getToken(CobolPreprocessorParser.XMLPARSE, 0)

        def XMLSS(self):
            return self.getToken(CobolPreprocessorParser.XMLSS, 0)

        def XOPTS(self):
            return self.getToken(CobolPreprocessorParser.XOPTS, 0)

        def XREF(self):
            return self.getToken(CobolPreprocessorParser.XREF, 0)

        def YEARWINDOW(self):
            return self.getToken(CobolPreprocessorParser.YEARWINDOW, 0)

        def YW(self):
            return self.getToken(CobolPreprocessorParser.YW, 0)

        def ZWB(self):
            return self.getToken(CobolPreprocessorParser.ZWB, 0)

        def C_CHAR(self):
            return self.getToken(CobolPreprocessorParser.C_CHAR, 0)

        def D_CHAR(self):
            return self.getToken(CobolPreprocessorParser.D_CHAR, 0)

        def E_CHAR(self):
            return self.getToken(CobolPreprocessorParser.E_CHAR, 0)

        def F_CHAR(self):
            return self.getToken(CobolPreprocessorParser.F_CHAR, 0)

        def H_CHAR(self):
            return self.getToken(CobolPreprocessorParser.H_CHAR, 0)

        def I_CHAR(self):
            return self.getToken(CobolPreprocessorParser.I_CHAR, 0)

        def M_CHAR(self):
            return self.getToken(CobolPreprocessorParser.M_CHAR, 0)

        def N_CHAR(self):
            return self.getToken(CobolPreprocessorParser.N_CHAR, 0)

        def Q_CHAR(self):
            return self.getToken(CobolPreprocessorParser.Q_CHAR, 0)

        def S_CHAR(self):
            return self.getToken(CobolPreprocessorParser.S_CHAR, 0)

        def U_CHAR(self):
            return self.getToken(CobolPreprocessorParser.U_CHAR, 0)

        def W_CHAR(self):
            return self.getToken(CobolPreprocessorParser.W_CHAR, 0)

        def X_CHAR(self):
            return self.getToken(CobolPreprocessorParser.X_CHAR, 0)

        def getRuleIndex(self):
            return CobolPreprocessorParser.RULE_charDataKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharDataKeyword" ):
                listener.enterCharDataKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharDataKeyword" ):
                listener.exitCharDataKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharDataKeyword" ):
                return visitor.visitCharDataKeyword(self)
            else:
                return visitor.visitChildren(self)




    def charDataKeyword(self):

        localctx = CobolPreprocessorParser.CharDataKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_charDataKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & -2346375405893844994) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -33570881) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -576460752303423489) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -19069934503985153) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 201326319) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





